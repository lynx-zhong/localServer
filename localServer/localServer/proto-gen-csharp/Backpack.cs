// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: backpack.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from backpack.proto</summary>
  public static partial class BackpackReflection {

    #region Descriptor
    /// <summary>File descriptor for backpack.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BackpackReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5iYWNrcGFjay5wcm90bxIFcHJvdG8inQIKBFByb3ASCgoCSWQYASABKAMS",
            "DAoETmFtZRgCIAEoCRIMCgREZXNjGAMgASgJEhUKDVN1cGVycG9zaXRpb24Y",
            "BCABKAUSDAoESWNvbhgFIAEoCRIQCghQcm9wVHlwZRgGIAEoBRIPCgdDb250",
            "ZW50GAcgASgJEhMKC1Byb3BVc2VUeXBlGAggASgFEg4KBkFjY2VzcxgJIAEo",
            "BRIQCghFeHBpcmVhdBgKIAEoCRITCgtFeHBpcmVhZnRlchgLIAEoCRIQCghN",
            "YXRlcmlhbBgMIAEoBRIRCglDcmVhdGVkYXQYDSABKAkSEQoJVXBkYXRlZGF0",
            "GA4gASgJEhEKCURlbGV0ZWRhdBgPIAEoCRIOCgZGa3V1aWQYECABKAkiugEK",
            "FlVzZXJCYWNrcGFja0NlbGxEZXRhaWwSCgoCSWQYASABKAMSDgoGRmt1dWlk",
            "GAIgASgJEg4KBlByb3BJZBgDIAEoAxITCgtQYWtjYWdlVHlwZRgEIAEoAxIL",
            "CgNOdW0YBSABKAUSEQoJQ3JlYXRlZGF0GAYgASgJEhEKCVVwZGF0ZWRhdBgH",
            "IAEoCRIRCglEZWxldGVkYXQYCCABKAkSGQoEUHJvcBgJIAEoCzILLnByb3Rv",
            "LlByb3AiUQoMVXNlckJhY2twYWNrEiwKBUNlbGxzGAEgAygLMh0ucHJvdG8u",
            "VXNlckJhY2twYWNrQ2VsbERldGFpbBITCgtQYWtjYWdlVHlwZRgCIAEoA2IG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Prop), global::Proto.Prop.Parser, new[]{ "Id", "Name", "Desc", "Superposition", "Icon", "PropType", "Content", "PropUseType", "Access", "Expireat", "Expireafter", "Material", "Createdat", "Updatedat", "Deletedat", "Fkuuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.UserBackpackCellDetail), global::Proto.UserBackpackCellDetail.Parser, new[]{ "Id", "Fkuuid", "PropId", "PakcageType", "Num", "Createdat", "Updatedat", "Deletedat", "Prop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.UserBackpack), global::Proto.UserBackpack.Parser, new[]{ "Cells", "PakcageType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///Prop 道具信息
  /// </summary>
  public sealed partial class Prop : pb::IMessage<Prop> {
    private static readonly pb::MessageParser<Prop> _parser = new pb::MessageParser<Prop>(() => new Prop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Prop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BackpackReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Prop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Prop(Prop other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      desc_ = other.desc_;
      superposition_ = other.superposition_;
      icon_ = other.icon_;
      propType_ = other.propType_;
      content_ = other.content_;
      propUseType_ = other.propUseType_;
      access_ = other.access_;
      expireat_ = other.expireat_;
      expireafter_ = other.expireafter_;
      material_ = other.material_;
      createdat_ = other.createdat_;
      updatedat_ = other.updatedat_;
      deletedat_ = other.deletedat_;
      fkuuid_ = other.fkuuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Prop Clone() {
      return new Prop(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///Id 数据库主键Id
    ///db::`xorm:"not null pk autoincr INT(11)"`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///Name 名字
    ///db::`xorm:" comment('名字') VARCHAR(128)"`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Desc" field.</summary>
    public const int DescFieldNumber = 3;
    private string desc_ = "";
    /// <summary>
    ///Desc 描述
    ///db::`xorm:" comment('描述') VARCHAR(128)"`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Superposition" field.</summary>
    public const int SuperpositionFieldNumber = 4;
    private int superposition_;
    /// <summary>
    ///Superposition 道具能否叠加,叠加数量
    ///db::`xorm:"comment('道具能否叠加') INT(11)"`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Superposition {
      get { return superposition_; }
      set {
        superposition_ = value;
      }
    }

    /// <summary>Field number for the "Icon" field.</summary>
    public const int IconFieldNumber = 5;
    private string icon_ = "";
    /// <summary>
    ///Icon 图标
    ///db::`xorm:" comment('图标') VARCHAR(128)"`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PropType" field.</summary>
    public const int PropTypeFieldNumber = 6;
    private int propType_;
    /// <summary>
    ///PropType 道具类型,通过道具类型确定背包类型
    /// 一般道具
    /// 限时道具
    /// 随机宝箱
    /// 选择宝箱
    /// 时装
    /// 头像
    /// 头像框
    /// ....
    ///db::`xorm:"not null INT(11)"`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropType {
      get { return propType_; }
      set {
        propType_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 7;
    private string content_ = "";
    /// <summary>
    ///Content 内容
    /// 道具本身内容
    /// 宝箱内容
    ///             ---->固定内容->道具id+数量
    ///             ---->随机内容->权重+道具id+数量
    ///db::`xorm:" comment('内容') VARCHAR(128)"`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PropUseType" field.</summary>
    public const int PropUseTypeFieldNumber = 8;
    private int propUseType_;
    /// <summary>
    ///PropUseType 道具使用类型
    /// 使用
    /// 来源
    /// 出售
    /// 使用,出售
    /// 使用,来源
    /// 来源,出售
    /// 使用来源出售
    /// ....
    ///db::`xorm:"not null INT(11)"`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropUseType {
      get { return propUseType_; }
      set {
        propUseType_ = value;
      }
    }

    /// <summary>Field number for the "Access" field.</summary>
    public const int AccessFieldNumber = 9;
    private int access_;
    /// <summary>
    ///Access 获取途径
    ///db::`xorm:"not null INT(11)"`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Access {
      get { return access_; }
      set {
        access_ = value;
      }
    }

    /// <summary>Field number for the "Expireat" field.</summary>
    public const int ExpireatFieldNumber = 10;
    private string expireat_ = "";
    /// <summary>
    ///Expireat 过期时间
    ///db::`xorm:"not null expireat comment('过期时间')"`::time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Expireat {
      get { return expireat_; }
      set {
        expireat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Expireafter" field.</summary>
    public const int ExpireafterFieldNumber = 11;
    private string expireafter_ = "";
    /// <summary>
    ///Expireafter 过期时间
    ///db::`xorm:"not null expireafter comment('过期时间')"`::time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Expireafter {
      get { return expireafter_; }
      set {
        expireafter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Material" field.</summary>
    public const int MaterialFieldNumber = 12;
    private int material_;
    /// <summary>
    ///Material 品质 美术 定义 
    ///db::`xorm:"not null material comment('品质')"`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "Createdat" field.</summary>
    public const int CreatedatFieldNumber = 13;
    private string createdat_ = "";
    /// <summary>
    ///Createdat 创建时间
    ///db::`xorm:"not null created comment('创建时间')"`::time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Createdat {
      get { return createdat_; }
      set {
        createdat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Updatedat" field.</summary>
    public const int UpdatedatFieldNumber = 14;
    private string updatedat_ = "";
    /// <summary>
    ///Updatedat 修改时间
    ///db::`xorm:"not null updated comment('更新时间')"`::time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Updatedat {
      get { return updatedat_; }
      set {
        updatedat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Deletedat" field.</summary>
    public const int DeletedatFieldNumber = 15;
    private string deletedat_ = "";
    /// <summary>
    ///Deletedat 删除时间
    ///db::`xorm:"deleted  comment('删除时间')"`::time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Deletedat {
      get { return deletedat_; }
      set {
        deletedat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Fkuuid" field.</summary>
    public const int FkuuidFieldNumber = 16;
    private string fkuuid_ = "";
    /// <summary>
    ///Fkuuid UUID 目前所属用户,个别道具会用到这个字段
    ///db::`xorm:" index not null comment('Fkuuid') VARCHAR(128)"`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkuuid {
      get { return fkuuid_; }
      set {
        fkuuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Prop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Prop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Desc != other.Desc) return false;
      if (Superposition != other.Superposition) return false;
      if (Icon != other.Icon) return false;
      if (PropType != other.PropType) return false;
      if (Content != other.Content) return false;
      if (PropUseType != other.PropUseType) return false;
      if (Access != other.Access) return false;
      if (Expireat != other.Expireat) return false;
      if (Expireafter != other.Expireafter) return false;
      if (Material != other.Material) return false;
      if (Createdat != other.Createdat) return false;
      if (Updatedat != other.Updatedat) return false;
      if (Deletedat != other.Deletedat) return false;
      if (Fkuuid != other.Fkuuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (Superposition != 0) hash ^= Superposition.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (PropType != 0) hash ^= PropType.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (PropUseType != 0) hash ^= PropUseType.GetHashCode();
      if (Access != 0) hash ^= Access.GetHashCode();
      if (Expireat.Length != 0) hash ^= Expireat.GetHashCode();
      if (Expireafter.Length != 0) hash ^= Expireafter.GetHashCode();
      if (Material != 0) hash ^= Material.GetHashCode();
      if (Createdat.Length != 0) hash ^= Createdat.GetHashCode();
      if (Updatedat.Length != 0) hash ^= Updatedat.GetHashCode();
      if (Deletedat.Length != 0) hash ^= Deletedat.GetHashCode();
      if (Fkuuid.Length != 0) hash ^= Fkuuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Desc);
      }
      if (Superposition != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Superposition);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Icon);
      }
      if (PropType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PropType);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Content);
      }
      if (PropUseType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PropUseType);
      }
      if (Access != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Access);
      }
      if (Expireat.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Expireat);
      }
      if (Expireafter.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Expireafter);
      }
      if (Material != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Material);
      }
      if (Createdat.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Createdat);
      }
      if (Updatedat.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Updatedat);
      }
      if (Deletedat.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Deletedat);
      }
      if (Fkuuid.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Fkuuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (Superposition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Superposition);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (PropType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropType);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (PropUseType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropUseType);
      }
      if (Access != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Access);
      }
      if (Expireat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Expireat);
      }
      if (Expireafter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Expireafter);
      }
      if (Material != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Material);
      }
      if (Createdat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Createdat);
      }
      if (Updatedat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Updatedat);
      }
      if (Deletedat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Deletedat);
      }
      if (Fkuuid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Fkuuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Prop other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.Superposition != 0) {
        Superposition = other.Superposition;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.PropType != 0) {
        PropType = other.PropType;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.PropUseType != 0) {
        PropUseType = other.PropUseType;
      }
      if (other.Access != 0) {
        Access = other.Access;
      }
      if (other.Expireat.Length != 0) {
        Expireat = other.Expireat;
      }
      if (other.Expireafter.Length != 0) {
        Expireafter = other.Expireafter;
      }
      if (other.Material != 0) {
        Material = other.Material;
      }
      if (other.Createdat.Length != 0) {
        Createdat = other.Createdat;
      }
      if (other.Updatedat.Length != 0) {
        Updatedat = other.Updatedat;
      }
      if (other.Deletedat.Length != 0) {
        Deletedat = other.Deletedat;
      }
      if (other.Fkuuid.Length != 0) {
        Fkuuid = other.Fkuuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Desc = input.ReadString();
            break;
          }
          case 32: {
            Superposition = input.ReadInt32();
            break;
          }
          case 42: {
            Icon = input.ReadString();
            break;
          }
          case 48: {
            PropType = input.ReadInt32();
            break;
          }
          case 58: {
            Content = input.ReadString();
            break;
          }
          case 64: {
            PropUseType = input.ReadInt32();
            break;
          }
          case 72: {
            Access = input.ReadInt32();
            break;
          }
          case 82: {
            Expireat = input.ReadString();
            break;
          }
          case 90: {
            Expireafter = input.ReadString();
            break;
          }
          case 96: {
            Material = input.ReadInt32();
            break;
          }
          case 106: {
            Createdat = input.ReadString();
            break;
          }
          case 114: {
            Updatedat = input.ReadString();
            break;
          }
          case 122: {
            Deletedat = input.ReadString();
            break;
          }
          case 130: {
            Fkuuid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 背包格详情
  /// </summary>
  public sealed partial class UserBackpackCellDetail : pb::IMessage<UserBackpackCellDetail> {
    private static readonly pb::MessageParser<UserBackpackCellDetail> _parser = new pb::MessageParser<UserBackpackCellDetail>(() => new UserBackpackCellDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserBackpackCellDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BackpackReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBackpackCellDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBackpackCellDetail(UserBackpackCellDetail other) : this() {
      id_ = other.id_;
      fkuuid_ = other.fkuuid_;
      propId_ = other.propId_;
      pakcageType_ = other.pakcageType_;
      num_ = other.num_;
      createdat_ = other.createdat_;
      updatedat_ = other.updatedat_;
      deletedat_ = other.deletedat_;
      Prop = other.prop_ != null ? other.Prop.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBackpackCellDetail Clone() {
      return new UserBackpackCellDetail(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///Id 数据库主键Id
    ///db::`xorm:"not null pk autoincr INT(11)"`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Fkuuid" field.</summary>
    public const int FkuuidFieldNumber = 2;
    private string fkuuid_ = "";
    /// <summary>
    ///Fkuuid UUID
    ///db::`xorm:" index not null comment('Fkuuid') VARCHAR(128)"`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkuuid {
      get { return fkuuid_; }
      set {
        fkuuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PropId" field.</summary>
    public const int PropIdFieldNumber = 3;
    private long propId_;
    /// <summary>
    ///db::`xorm:"not null INT(11)"`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    /// <summary>Field number for the "PakcageType" field.</summary>
    public const int PakcageTypeFieldNumber = 4;
    private long pakcageType_;
    /// <summary>
    ///db::`xorm:"not null INT(11)"`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PakcageType {
      get { return pakcageType_; }
      set {
        pakcageType_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 5;
    private int num_;
    /// <summary>
    ///db::`xorm:"not null INT(11)"`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "Createdat" field.</summary>
    public const int CreatedatFieldNumber = 6;
    private string createdat_ = "";
    /// <summary>
    ///Createdat 创建时间
    ///db::`xorm:"not null created comment('创建时间')"`::time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Createdat {
      get { return createdat_; }
      set {
        createdat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Updatedat" field.</summary>
    public const int UpdatedatFieldNumber = 7;
    private string updatedat_ = "";
    /// <summary>
    ///Updatedat 修改时间
    ///db::`xorm:"not null updated comment('更新时间')"`::time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Updatedat {
      get { return updatedat_; }
      set {
        updatedat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Deletedat" field.</summary>
    public const int DeletedatFieldNumber = 8;
    private string deletedat_ = "";
    /// <summary>
    ///Deletedat 删除时间
    ///db::`xorm:"deleted  comment('删除时间')"`::time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Deletedat {
      get { return deletedat_; }
      set {
        deletedat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Prop" field.</summary>
    public const int PropFieldNumber = 9;
    private global::Proto.Prop prop_;
    /// <summary>
    /// 道具信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Prop Prop {
      get { return prop_; }
      set {
        prop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserBackpackCellDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserBackpackCellDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Fkuuid != other.Fkuuid) return false;
      if (PropId != other.PropId) return false;
      if (PakcageType != other.PakcageType) return false;
      if (Num != other.Num) return false;
      if (Createdat != other.Createdat) return false;
      if (Updatedat != other.Updatedat) return false;
      if (Deletedat != other.Deletedat) return false;
      if (!object.Equals(Prop, other.Prop)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Fkuuid.Length != 0) hash ^= Fkuuid.GetHashCode();
      if (PropId != 0L) hash ^= PropId.GetHashCode();
      if (PakcageType != 0L) hash ^= PakcageType.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Createdat.Length != 0) hash ^= Createdat.GetHashCode();
      if (Updatedat.Length != 0) hash ^= Updatedat.GetHashCode();
      if (Deletedat.Length != 0) hash ^= Deletedat.GetHashCode();
      if (prop_ != null) hash ^= Prop.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Fkuuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Fkuuid);
      }
      if (PropId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PropId);
      }
      if (PakcageType != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(PakcageType);
      }
      if (Num != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Num);
      }
      if (Createdat.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Createdat);
      }
      if (Updatedat.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Updatedat);
      }
      if (Deletedat.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Deletedat);
      }
      if (prop_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Prop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Fkuuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkuuid);
      }
      if (PropId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropId);
      }
      if (PakcageType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PakcageType);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Createdat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Createdat);
      }
      if (Updatedat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Updatedat);
      }
      if (Deletedat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Deletedat);
      }
      if (prop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prop);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserBackpackCellDetail other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Fkuuid.Length != 0) {
        Fkuuid = other.Fkuuid;
      }
      if (other.PropId != 0L) {
        PropId = other.PropId;
      }
      if (other.PakcageType != 0L) {
        PakcageType = other.PakcageType;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Createdat.Length != 0) {
        Createdat = other.Createdat;
      }
      if (other.Updatedat.Length != 0) {
        Updatedat = other.Updatedat;
      }
      if (other.Deletedat.Length != 0) {
        Deletedat = other.Deletedat;
      }
      if (other.prop_ != null) {
        if (prop_ == null) {
          prop_ = new global::Proto.Prop();
        }
        Prop.MergeFrom(other.Prop);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Fkuuid = input.ReadString();
            break;
          }
          case 24: {
            PropId = input.ReadInt64();
            break;
          }
          case 32: {
            PakcageType = input.ReadInt64();
            break;
          }
          case 40: {
            Num = input.ReadInt32();
            break;
          }
          case 50: {
            Createdat = input.ReadString();
            break;
          }
          case 58: {
            Updatedat = input.ReadString();
            break;
          }
          case 66: {
            Deletedat = input.ReadString();
            break;
          }
          case 74: {
            if (prop_ == null) {
              prop_ = new global::Proto.Prop();
            }
            input.ReadMessage(prop_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 背包数据
  /// </summary>
  public sealed partial class UserBackpack : pb::IMessage<UserBackpack> {
    private static readonly pb::MessageParser<UserBackpack> _parser = new pb::MessageParser<UserBackpack>(() => new UserBackpack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserBackpack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BackpackReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBackpack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBackpack(UserBackpack other) : this() {
      cells_ = other.cells_.Clone();
      pakcageType_ = other.pakcageType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBackpack Clone() {
      return new UserBackpack(this);
    }

    /// <summary>Field number for the "Cells" field.</summary>
    public const int CellsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.UserBackpackCellDetail> _repeated_cells_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.UserBackpackCellDetail.Parser);
    private readonly pbc::RepeatedField<global::Proto.UserBackpackCellDetail> cells_ = new pbc::RepeatedField<global::Proto.UserBackpackCellDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.UserBackpackCellDetail> Cells {
      get { return cells_; }
    }

    /// <summary>Field number for the "PakcageType" field.</summary>
    public const int PakcageTypeFieldNumber = 2;
    private long pakcageType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PakcageType {
      get { return pakcageType_; }
      set {
        pakcageType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserBackpack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserBackpack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cells_.Equals(other.cells_)) return false;
      if (PakcageType != other.PakcageType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cells_.GetHashCode();
      if (PakcageType != 0L) hash ^= PakcageType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cells_.WriteTo(output, _repeated_cells_codec);
      if (PakcageType != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PakcageType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cells_.CalculateSize(_repeated_cells_codec);
      if (PakcageType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PakcageType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserBackpack other) {
      if (other == null) {
        return;
      }
      cells_.Add(other.cells_);
      if (other.PakcageType != 0L) {
        PakcageType = other.PakcageType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cells_.AddEntriesFrom(input, _repeated_cells_codec);
            break;
          }
          case 16: {
            PakcageType = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

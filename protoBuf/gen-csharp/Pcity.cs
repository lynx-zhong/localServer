// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: pcity.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from pcity.proto</summary>
  public static partial class PcityReflection {

    #region Descriptor
    /// <summary>File descriptor for pcity.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PcityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtwY2l0eS5wcm90bxIFcHJvdG8aC3B1c2VyLnByb3RvIigKElJlcXVlc3RD",
            "aXR5aW5mb1JlcRISCgpGa2NpdHljb2RlGAEgASgJIpQCChJSZXF1ZXN0Q2l0",
            "eWluZm9Sc3ASEgoKRmtjaXR5Y29kZRgBIAEoCRIQCghDaXR5bmFtZRgCIAEo",
            "CRIRCglDaXR5bGV2ZWwYBCABKAUSFQoNQ2l0eWJ1aWxkZXJpZBgFIAEoCRIU",
            "CgxDaXR5b3BlbnRpbWUYBiABKAkSFgoOQ2l0eWFzY3JpcHRpb24YByABKAkS",
            "FAoMQ3RpeWxlYWRlcmlkGAggASgJEhYKDkNpdHlwcm9zcGVyaXR5GAkgASgD",
            "EhEKCUNpdHlXaWR0aBgKIAEoAxISCgpDaXR5TGVuZ3RoGAsgASgDEhQKDEVh",
            "Y2hMYW5kU2l6ZRgMIAEoAhIVCg1DaXR5RGlyZWN0aW9uGAMgASgIIjwKElJl",
            "cXVlc3RDaXR5bGlzdFJlcRISCgptaW54eXNjb3BlGAEgASgDEhIKCm1heHh5",
            "c2NvcGUYAiABKAMi1wEKE1JlcXVlc3RDaXR5aW5mb3R5cGUSEgoKRmtjaXR5",
            "Y29kZRgBIAEoCRISCgpGa2NpdHluYW1lGAIgASgJEhYKDkNpdHlhc2NyaXB0",
            "aW9uGAMgASgJEhUKDUNpdHlsb2NhdGlvbngYBCABKAMSFQoNQ2l0eWxvY2F0",
            "aW9ueRgFIAEoAxIRCglDaXR5V2lkdGgYBiABKAMSEgoKQ2l0eUxlbmd0aBgH",
            "IAEoAxIUCgxFYWNoTGFuZFNpemUYCCABKAISFQoNQ2l0eURpcmVjdGlvbhgJ",
            "IAEoCCJBChJSZXF1ZXN0Q2l0eWxpc3RSc3ASKwoHcnNwbGlzdBgBIAMoCzIa",
            "LnByb3RvLlJlcXVlc3RDaXR5aW5mb3R5cGUiXAoNUEJ1aWxkaW5naW5mbxIM",
            "CgRVdWlkGAEgASgDEhQKDEJ1aWxkaW5nQ29kZRgCIAEoAxIPCgdUb3dhcmRz",
            "GAMgASgDEhYKDklzVHJ1ZUJ1aWxkaW5nGAQgASgIIqcBCg1QTGluZVVzZXJp",
            "bmZvEg4KBkZrdXVpZBgBIAEoCRINCgVYYXhpcxgCIAEoAxINCgVZYXhpcxgD",
            "IAEoAxIRCglEaXJlY3Rpb24YBCABKAgSFAoMT3JpZW50YXRpb25zGAUgASgD",
            "EhEKCVJlbWFpbk51bRgGIAEoAxIVCg1Ga3RyYW5zcG9ydGlkGAggASgDEhUK",
            "DUdpdmVVcFJlY2xhbWEYByABKAgiSgoNUExpbmVQcm9waW5mbxIQCghQcm9w",
            "dHlwZRgBIAEoAxISCgpQcm9wc3RhdHVzGAIgASgDEhMKC1Byb3BlbmR0aW1l",
            "GAMgASgDIj8KEVBCdWlsZGluZ2luZm9saXN0EioKDEJ1aWxkaW5naW5mbxgB",
            "IAMoCzIULnByb3RvLlBCdWlsZGluZ2luZm8iKwoVUmVxdWVzdENpdHlNYXBE",
            "YXRhUmVxEhIKCkZrY2l0eWNvZGUYASABKAkinwIKFVJlcXVlc3RDaXR5TWFw",
            "RGF0YVJzcBIRCglDaXR5V2lkdGgYBiABKAMSEgoKQ2l0eUxlbmd0aBgHIAEo",
            "AxIUCgxFYWNoTGFuZFNpemUYCCABKAISFQoNQ2l0eURpcmVjdGlvbhgJIAEo",
            "CBImCgpQbG90c2J1eWVkGAEgAygLMhIucHJvdG8uUFBsb3RzYnV5ZWQSMgoQ",
            "QnVpbGRpbmdCYXNlaW5mbxgCIAMoCzIYLnByb3RvLlBCdWlsZGluZ2luZm9s",
            "aXN0EioKDGxpbmV1c2VyaW5mbxgDIAEoCzIULnByb3RvLlBMaW5lVXNlcmlu",
            "Zm8SKgoMbGluZXByb3BpbmZvGAQgAygLMhQucHJvdG8uUExpbmVQcm9waW5m",
            "byKHAQoLUFBsb3RzYnV5ZWQSEgoKRmtjaXR5Y29kZRgCIAEoCRIXCg9Ga1Ro",
            "aXJkTGFuZHV1aWQYAyABKAkSDgoGRmt1dWlkGAQgASgJEg0KBVhheGlzGAUg",
            "ASgDEg0KBVlheGlzGAYgASgDEg8KB0J1eWRhdGUYByABKAkSDAoETmFtZRgI",
            "IAEoCSJIChBSZXF1ZXN0R29XYWxrUmVxEhIKCkZrY2l0eWNvZGUYASABKAkS",
            "DgoGRmt1dWlkGAIgASgJEhAKCFdhbGt1c2VkGAMgASgDInwKEFJlcXVlc3RH",
            "b1dhbGtSc3ASDgoGRmt1dWlkGAEgASgJEg0KBVhheGlzGAIgASgDEg0KBVlh",
            "eGlzGAMgASgDEhEKCURpcmVjdGlvbhgEIAEoCBIUCgxPcmllbnRhdGlvbnMY",
            "BSABKAMSEQoJUmVtYWluTnVtGAYgASgDIn8KFFJlcXVlc3RXYWxrVmVyaWZ5",
            "UmVxEg4KBkZrdXVpZBgBIAEoCRINCgVYYXhpcxgCIAEoAxINCgVZYXhpcxgD",
            "IAEoAxIRCglEaXJlY3Rpb24YBCABKAgSFAoMT3JpZW50YXRpb25zGAUgASgD",
            "EhAKCFdhbGt1c2VkGAYgASgDIqoBChhSZXF1ZXN0V2Fsa1ZlcmlmeVN1Y2NS",
            "c3ASEgoKRmtDaXR5Q29kZRgGIAEoCRIOCgZGa3V1aWQYASABKAkSDQoFWGF4",
            "aXMYAiABKAMSDQoFWWF4aXMYAyABKAMSEQoJRGlyZWN0aW9uGAQgASgIEhQK",
            "DE9yaWVudGF0aW9ucxgFIAEoAxIVCg1Ga3RyYW5zcG9ydGlkGAcgASgDEgwK",
            "BFR1cm4YCCABKAgiPAoXUmVxdWVzdFdhbGtWZXJpZnlFcnJSc3ASDgoGRmt1",
            "dWlkGAEgASgJEhEKCUJhY2tJbmRleBgCIAEoAyIjChFSZXF1ZXN0V2Fsa1dh",
            "eVJlcRIOCgZGa3V1aWQYASABKAkiOgoRUmVxdWVzdFdhbGtXYXlSc3ASJQoG",
            "V2F5ZGF0GAEgAygLMhUucHJvdG8uUmVxdWVzdFdheWRhdGEiYQoVUmVxdWVz",
            "dFJlY2xhbWF0aW9uUmVxEg4KBkZrdXVpZBgBIAEoCRISCgpGa0NpdHlDb2Rl",
            "GAIgASgJEhEKCUxhbmRYYXhpcxgDIAEoAxIRCglMYW5kWWF4aXMYBCABKAMi",
            "OAoVUmVxdWVzdFJlY2xhbWF0aW9uUnNwEg8KB1JlcVN1Y2MYASABKAgSDgoG",
            "Rmt1dWlkGAIgASgJIkQKGVJlcXVlc3RSZWNsYW1hdGlvblN1Y2NSc3ASJwoL",
            "UFBsb3RzYnV5ZWQYASABKAsyEi5wcm90by5QUGxvdHNidXllZCIyChxSZXF1",
            "ZXN0TGluZW9mVXNlclBvc2l0aW9uUmVxEhIKCkZrY2l0eWNvZGUYASABKAki",
            "ewocUmVxdWVzdExpbmVvZlVzZXJQb3NpdGlvblJzcBIsCgtvZmZMaW5ldXVp",
            "ZBgBIAMoCzIXLnByb3RvLlBvc2l0aW9uUm9sZUluZm8SLQoMbGluZXVzZXJp",
            "bmZvGAMgAygLMhcucHJvdG8uUG9zaXRpb25Sb2xlSW5mbyKGAQoQUG9zaXRp",
            "b25Sb2xlSW5mbxIOCgZGa3V1aWQYASABKAkSDAoETmFtZRgHIAEoCRINCgVY",
            "YXhpcxgCIAEoAxINCgVZYXhpcxgDIAEoAxIRCglEaXJlY3Rpb24YBCABKAgS",
            "FAoMT3JpZW50YXRpb25zGAUgASgDEg0KBUV4dHJhGAYgASgJIkEKG1JlcXVl",
            "c3RHaXZlVXBSZWNsYW1hdGlvblJlcRIOCgZGa3V1aWQYASABKAkSEgoKRmtj",
            "aXR5Y29kZRgCIAEoCSItChtSZXF1ZXN0R2l2ZVVwUmVjbGFtYXRpb25Sc3AS",
            "DgoGVXBTdWNjGAEgASgIYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.PuserReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestCityinfoReq), global::Proto.RequestCityinfoReq.Parser, new[]{ "Fkcitycode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestCityinfoRsp), global::Proto.RequestCityinfoRsp.Parser, new[]{ "Fkcitycode", "Cityname", "Citylevel", "Citybuilderid", "Cityopentime", "Cityascription", "Ctiyleaderid", "Cityprosperity", "CityWidth", "CityLength", "EachLandSize", "CityDirection" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestCitylistReq), global::Proto.RequestCitylistReq.Parser, new[]{ "Minxyscope", "Maxxyscope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestCityinfotype), global::Proto.RequestCityinfotype.Parser, new[]{ "Fkcitycode", "Fkcityname", "Cityascription", "Citylocationx", "Citylocationy", "CityWidth", "CityLength", "EachLandSize", "CityDirection" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestCitylistRsp), global::Proto.RequestCitylistRsp.Parser, new[]{ "Rsplist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.PBuildinginfo), global::Proto.PBuildinginfo.Parser, new[]{ "Uuid", "BuildingCode", "Towards", "IsTrueBuilding" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.PLineUserinfo), global::Proto.PLineUserinfo.Parser, new[]{ "Fkuuid", "Xaxis", "Yaxis", "Direction", "Orientations", "RemainNum", "Fktransportid", "GiveUpReclama" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.PLinePropinfo), global::Proto.PLinePropinfo.Parser, new[]{ "Proptype", "Propstatus", "Propendtime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.PBuildinginfolist), global::Proto.PBuildinginfolist.Parser, new[]{ "Buildinginfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestCityMapDataReq), global::Proto.RequestCityMapDataReq.Parser, new[]{ "Fkcitycode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestCityMapDataRsp), global::Proto.RequestCityMapDataRsp.Parser, new[]{ "CityWidth", "CityLength", "EachLandSize", "CityDirection", "Plotsbuyed", "BuildingBaseinfo", "Lineuserinfo", "Linepropinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.PPlotsbuyed), global::Proto.PPlotsbuyed.Parser, new[]{ "Fkcitycode", "FkThirdLanduuid", "Fkuuid", "Xaxis", "Yaxis", "Buydate", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestGoWalkReq), global::Proto.RequestGoWalkReq.Parser, new[]{ "Fkcitycode", "Fkuuid", "Walkused" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestGoWalkRsp), global::Proto.RequestGoWalkRsp.Parser, new[]{ "Fkuuid", "Xaxis", "Yaxis", "Direction", "Orientations", "RemainNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestWalkVerifyReq), global::Proto.RequestWalkVerifyReq.Parser, new[]{ "Fkuuid", "Xaxis", "Yaxis", "Direction", "Orientations", "Walkused" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestWalkVerifySuccRsp), global::Proto.RequestWalkVerifySuccRsp.Parser, new[]{ "FkCityCode", "Fkuuid", "Xaxis", "Yaxis", "Direction", "Orientations", "Fktransportid", "Turn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestWalkVerifyErrRsp), global::Proto.RequestWalkVerifyErrRsp.Parser, new[]{ "Fkuuid", "BackIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestWalkWayReq), global::Proto.RequestWalkWayReq.Parser, new[]{ "Fkuuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestWalkWayRsp), global::Proto.RequestWalkWayRsp.Parser, new[]{ "Waydat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestReclamationReq), global::Proto.RequestReclamationReq.Parser, new[]{ "Fkuuid", "FkCityCode", "LandXaxis", "LandYaxis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestReclamationRsp), global::Proto.RequestReclamationRsp.Parser, new[]{ "ReqSucc", "Fkuuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestReclamationSuccRsp), global::Proto.RequestReclamationSuccRsp.Parser, new[]{ "PPlotsbuyed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestLineofUserPositionReq), global::Proto.RequestLineofUserPositionReq.Parser, new[]{ "Fkcitycode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestLineofUserPositionRsp), global::Proto.RequestLineofUserPositionRsp.Parser, new[]{ "OffLineuuid", "Lineuserinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.PositionRoleInfo), global::Proto.PositionRoleInfo.Parser, new[]{ "Fkuuid", "Name", "Xaxis", "Yaxis", "Direction", "Orientations", "Extra" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestGiveUpReclamationReq), global::Proto.RequestGiveUpReclamationReq.Parser, new[]{ "Fkuuid", "Fkcitycode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RequestGiveUpReclamationRsp), global::Proto.RequestGiveUpReclamationRsp.Parser, new[]{ "UpSucc" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///GetCityinfoReq 查询城市信息
  /// </summary>
  public sealed partial class RequestCityinfoReq : pb::IMessage<RequestCityinfoReq> {
    private static readonly pb::MessageParser<RequestCityinfoReq> _parser = new pb::MessageParser<RequestCityinfoReq>(() => new RequestCityinfoReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestCityinfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCityinfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCityinfoReq(RequestCityinfoReq other) : this() {
      fkcitycode_ = other.fkcitycode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCityinfoReq Clone() {
      return new RequestCityinfoReq(this);
    }

    /// <summary>Field number for the "Fkcitycode" field.</summary>
    public const int FkcitycodeFieldNumber = 1;
    private string fkcitycode_ = "";
    /// <summary>
    ///Fkcitycode 城市
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkcitycode {
      get { return fkcitycode_; }
      set {
        fkcitycode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestCityinfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestCityinfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fkcitycode != other.Fkcitycode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fkcitycode.Length != 0) hash ^= Fkcitycode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fkcitycode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fkcitycode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fkcitycode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkcitycode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestCityinfoReq other) {
      if (other == null) {
        return;
      }
      if (other.Fkcitycode.Length != 0) {
        Fkcitycode = other.Fkcitycode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fkcitycode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///FindCityleaderinfoRsp 查询城市信息
  /// </summary>
  public sealed partial class RequestCityinfoRsp : pb::IMessage<RequestCityinfoRsp> {
    private static readonly pb::MessageParser<RequestCityinfoRsp> _parser = new pb::MessageParser<RequestCityinfoRsp>(() => new RequestCityinfoRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestCityinfoRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCityinfoRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCityinfoRsp(RequestCityinfoRsp other) : this() {
      fkcitycode_ = other.fkcitycode_;
      cityname_ = other.cityname_;
      citylevel_ = other.citylevel_;
      citybuilderid_ = other.citybuilderid_;
      cityopentime_ = other.cityopentime_;
      cityascription_ = other.cityascription_;
      ctiyleaderid_ = other.ctiyleaderid_;
      cityprosperity_ = other.cityprosperity_;
      cityWidth_ = other.cityWidth_;
      cityLength_ = other.cityLength_;
      eachLandSize_ = other.eachLandSize_;
      cityDirection_ = other.cityDirection_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCityinfoRsp Clone() {
      return new RequestCityinfoRsp(this);
    }

    /// <summary>Field number for the "Fkcitycode" field.</summary>
    public const int FkcitycodeFieldNumber = 1;
    private string fkcitycode_ = "";
    /// <summary>
    ///Cityid 城市
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkcitycode {
      get { return fkcitycode_; }
      set {
        fkcitycode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Cityname" field.</summary>
    public const int CitynameFieldNumber = 2;
    private string cityname_ = "";
    /// <summary>
    ///Cityname 城市名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cityname {
      get { return cityname_; }
      set {
        cityname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Citylevel" field.</summary>
    public const int CitylevelFieldNumber = 4;
    private int citylevel_;
    /// <summary>
    ///Citylevel 城市等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Citylevel {
      get { return citylevel_; }
      set {
        citylevel_ = value;
      }
    }

    /// <summary>Field number for the "Citybuilderid" field.</summary>
    public const int CitybuilderidFieldNumber = 5;
    private string citybuilderid_ = "";
    /// <summary>
    ///Citybuilder 创建者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Citybuilderid {
      get { return citybuilderid_; }
      set {
        citybuilderid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Cityopentime" field.</summary>
    public const int CityopentimeFieldNumber = 6;
    private string cityopentime_ = "";
    /// <summary>
    ///Cityopentime 城市创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cityopentime {
      get { return cityopentime_; }
      set {
        cityopentime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Cityascription" field.</summary>
    public const int CityascriptionFieldNumber = 7;
    private string cityascription_ = "";
    /// <summary>
    ///Cityascription 城市归属地(国家)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cityascription {
      get { return cityascription_; }
      set {
        cityascription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ctiyleaderid" field.</summary>
    public const int CtiyleaderidFieldNumber = 8;
    private string ctiyleaderid_ = "";
    /// <summary>
    ///Ctiyleader 城市领导者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ctiyleaderid {
      get { return ctiyleaderid_; }
      set {
        ctiyleaderid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Cityprosperity" field.</summary>
    public const int CityprosperityFieldNumber = 9;
    private long cityprosperity_;
    /// <summary>
    ///Cityprosperity 城市繁荣度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Cityprosperity {
      get { return cityprosperity_; }
      set {
        cityprosperity_ = value;
      }
    }

    /// <summary>Field number for the "CityWidth" field.</summary>
    public const int CityWidthFieldNumber = 10;
    private long cityWidth_;
    /// <summary>
    ///城市大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CityWidth {
      get { return cityWidth_; }
      set {
        cityWidth_ = value;
      }
    }

    /// <summary>Field number for the "CityLength" field.</summary>
    public const int CityLengthFieldNumber = 11;
    private long cityLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CityLength {
      get { return cityLength_; }
      set {
        cityLength_ = value;
      }
    }

    /// <summary>Field number for the "EachLandSize" field.</summary>
    public const int EachLandSizeFieldNumber = 12;
    private float eachLandSize_;
    /// <summary>
    ///每个地块大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EachLandSize {
      get { return eachLandSize_; }
      set {
        eachLandSize_ = value;
      }
    }

    /// <summary>Field number for the "CityDirection" field.</summary>
    public const int CityDirectionFieldNumber = 3;
    private bool cityDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CityDirection {
      get { return cityDirection_; }
      set {
        cityDirection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestCityinfoRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestCityinfoRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fkcitycode != other.Fkcitycode) return false;
      if (Cityname != other.Cityname) return false;
      if (Citylevel != other.Citylevel) return false;
      if (Citybuilderid != other.Citybuilderid) return false;
      if (Cityopentime != other.Cityopentime) return false;
      if (Cityascription != other.Cityascription) return false;
      if (Ctiyleaderid != other.Ctiyleaderid) return false;
      if (Cityprosperity != other.Cityprosperity) return false;
      if (CityWidth != other.CityWidth) return false;
      if (CityLength != other.CityLength) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EachLandSize, other.EachLandSize)) return false;
      if (CityDirection != other.CityDirection) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fkcitycode.Length != 0) hash ^= Fkcitycode.GetHashCode();
      if (Cityname.Length != 0) hash ^= Cityname.GetHashCode();
      if (Citylevel != 0) hash ^= Citylevel.GetHashCode();
      if (Citybuilderid.Length != 0) hash ^= Citybuilderid.GetHashCode();
      if (Cityopentime.Length != 0) hash ^= Cityopentime.GetHashCode();
      if (Cityascription.Length != 0) hash ^= Cityascription.GetHashCode();
      if (Ctiyleaderid.Length != 0) hash ^= Ctiyleaderid.GetHashCode();
      if (Cityprosperity != 0L) hash ^= Cityprosperity.GetHashCode();
      if (CityWidth != 0L) hash ^= CityWidth.GetHashCode();
      if (CityLength != 0L) hash ^= CityLength.GetHashCode();
      if (EachLandSize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EachLandSize);
      if (CityDirection != false) hash ^= CityDirection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fkcitycode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fkcitycode);
      }
      if (Cityname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cityname);
      }
      if (CityDirection != false) {
        output.WriteRawTag(24);
        output.WriteBool(CityDirection);
      }
      if (Citylevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Citylevel);
      }
      if (Citybuilderid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Citybuilderid);
      }
      if (Cityopentime.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Cityopentime);
      }
      if (Cityascription.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Cityascription);
      }
      if (Ctiyleaderid.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Ctiyleaderid);
      }
      if (Cityprosperity != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Cityprosperity);
      }
      if (CityWidth != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(CityWidth);
      }
      if (CityLength != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(CityLength);
      }
      if (EachLandSize != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(EachLandSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fkcitycode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkcitycode);
      }
      if (Cityname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cityname);
      }
      if (Citylevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Citylevel);
      }
      if (Citybuilderid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Citybuilderid);
      }
      if (Cityopentime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cityopentime);
      }
      if (Cityascription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cityascription);
      }
      if (Ctiyleaderid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ctiyleaderid);
      }
      if (Cityprosperity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cityprosperity);
      }
      if (CityWidth != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CityWidth);
      }
      if (CityLength != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CityLength);
      }
      if (EachLandSize != 0F) {
        size += 1 + 4;
      }
      if (CityDirection != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestCityinfoRsp other) {
      if (other == null) {
        return;
      }
      if (other.Fkcitycode.Length != 0) {
        Fkcitycode = other.Fkcitycode;
      }
      if (other.Cityname.Length != 0) {
        Cityname = other.Cityname;
      }
      if (other.Citylevel != 0) {
        Citylevel = other.Citylevel;
      }
      if (other.Citybuilderid.Length != 0) {
        Citybuilderid = other.Citybuilderid;
      }
      if (other.Cityopentime.Length != 0) {
        Cityopentime = other.Cityopentime;
      }
      if (other.Cityascription.Length != 0) {
        Cityascription = other.Cityascription;
      }
      if (other.Ctiyleaderid.Length != 0) {
        Ctiyleaderid = other.Ctiyleaderid;
      }
      if (other.Cityprosperity != 0L) {
        Cityprosperity = other.Cityprosperity;
      }
      if (other.CityWidth != 0L) {
        CityWidth = other.CityWidth;
      }
      if (other.CityLength != 0L) {
        CityLength = other.CityLength;
      }
      if (other.EachLandSize != 0F) {
        EachLandSize = other.EachLandSize;
      }
      if (other.CityDirection != false) {
        CityDirection = other.CityDirection;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fkcitycode = input.ReadString();
            break;
          }
          case 18: {
            Cityname = input.ReadString();
            break;
          }
          case 24: {
            CityDirection = input.ReadBool();
            break;
          }
          case 32: {
            Citylevel = input.ReadInt32();
            break;
          }
          case 42: {
            Citybuilderid = input.ReadString();
            break;
          }
          case 50: {
            Cityopentime = input.ReadString();
            break;
          }
          case 58: {
            Cityascription = input.ReadString();
            break;
          }
          case 66: {
            Ctiyleaderid = input.ReadString();
            break;
          }
          case 72: {
            Cityprosperity = input.ReadInt64();
            break;
          }
          case 80: {
            CityWidth = input.ReadInt64();
            break;
          }
          case 88: {
            CityLength = input.ReadInt64();
            break;
          }
          case 101: {
            EachLandSize = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///FindCitylistReq 获取城市列表
  /// </summary>
  public sealed partial class RequestCitylistReq : pb::IMessage<RequestCitylistReq> {
    private static readonly pb::MessageParser<RequestCitylistReq> _parser = new pb::MessageParser<RequestCitylistReq>(() => new RequestCitylistReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestCitylistReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCitylistReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCitylistReq(RequestCitylistReq other) : this() {
      minxyscope_ = other.minxyscope_;
      maxxyscope_ = other.maxxyscope_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCitylistReq Clone() {
      return new RequestCitylistReq(this);
    }

    /// <summary>Field number for the "minxyscope" field.</summary>
    public const int MinxyscopeFieldNumber = 1;
    private long minxyscope_;
    /// <summary>
    ///世界地图坐标范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Minxyscope {
      get { return minxyscope_; }
      set {
        minxyscope_ = value;
      }
    }

    /// <summary>Field number for the "maxxyscope" field.</summary>
    public const int MaxxyscopeFieldNumber = 2;
    private long maxxyscope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Maxxyscope {
      get { return maxxyscope_; }
      set {
        maxxyscope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestCitylistReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestCitylistReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Minxyscope != other.Minxyscope) return false;
      if (Maxxyscope != other.Maxxyscope) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Minxyscope != 0L) hash ^= Minxyscope.GetHashCode();
      if (Maxxyscope != 0L) hash ^= Maxxyscope.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Minxyscope != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Minxyscope);
      }
      if (Maxxyscope != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Maxxyscope);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Minxyscope != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Minxyscope);
      }
      if (Maxxyscope != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Maxxyscope);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestCitylistReq other) {
      if (other == null) {
        return;
      }
      if (other.Minxyscope != 0L) {
        Minxyscope = other.Minxyscope;
      }
      if (other.Maxxyscope != 0L) {
        Maxxyscope = other.Maxxyscope;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Minxyscope = input.ReadInt64();
            break;
          }
          case 16: {
            Maxxyscope = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///FindCitylistRsp 城市列表类
  /// </summary>
  public sealed partial class RequestCityinfotype : pb::IMessage<RequestCityinfotype> {
    private static readonly pb::MessageParser<RequestCityinfotype> _parser = new pb::MessageParser<RequestCityinfotype>(() => new RequestCityinfotype());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestCityinfotype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCityinfotype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCityinfotype(RequestCityinfotype other) : this() {
      fkcitycode_ = other.fkcitycode_;
      fkcityname_ = other.fkcityname_;
      cityascription_ = other.cityascription_;
      citylocationx_ = other.citylocationx_;
      citylocationy_ = other.citylocationy_;
      cityWidth_ = other.cityWidth_;
      cityLength_ = other.cityLength_;
      eachLandSize_ = other.eachLandSize_;
      cityDirection_ = other.cityDirection_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCityinfotype Clone() {
      return new RequestCityinfotype(this);
    }

    /// <summary>Field number for the "Fkcitycode" field.</summary>
    public const int FkcitycodeFieldNumber = 1;
    private string fkcitycode_ = "";
    /// <summary>
    ///Fkcitycode 城市id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkcitycode {
      get { return fkcitycode_; }
      set {
        fkcitycode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Fkcityname" field.</summary>
    public const int FkcitynameFieldNumber = 2;
    private string fkcityname_ = "";
    /// <summary>
    ///Fkcityname 城市名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkcityname {
      get { return fkcityname_; }
      set {
        fkcityname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Cityascription" field.</summary>
    public const int CityascriptionFieldNumber = 3;
    private string cityascription_ = "";
    /// <summary>
    ///Cityascription 城市归属地
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cityascription {
      get { return cityascription_; }
      set {
        cityascription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Citylocationx" field.</summary>
    public const int CitylocationxFieldNumber = 4;
    private long citylocationx_;
    /// <summary>
    ///Citylocation 城市坐标XY轴
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Citylocationx {
      get { return citylocationx_; }
      set {
        citylocationx_ = value;
      }
    }

    /// <summary>Field number for the "Citylocationy" field.</summary>
    public const int CitylocationyFieldNumber = 5;
    private long citylocationy_;
    /// <summary>
    ///Citylocation 城市坐标XY轴
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Citylocationy {
      get { return citylocationy_; }
      set {
        citylocationy_ = value;
      }
    }

    /// <summary>Field number for the "CityWidth" field.</summary>
    public const int CityWidthFieldNumber = 6;
    private long cityWidth_;
    /// <summary>
    ///城市大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CityWidth {
      get { return cityWidth_; }
      set {
        cityWidth_ = value;
      }
    }

    /// <summary>Field number for the "CityLength" field.</summary>
    public const int CityLengthFieldNumber = 7;
    private long cityLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CityLength {
      get { return cityLength_; }
      set {
        cityLength_ = value;
      }
    }

    /// <summary>Field number for the "EachLandSize" field.</summary>
    public const int EachLandSizeFieldNumber = 8;
    private float eachLandSize_;
    /// <summary>
    ///每个地块大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EachLandSize {
      get { return eachLandSize_; }
      set {
        eachLandSize_ = value;
      }
    }

    /// <summary>Field number for the "CityDirection" field.</summary>
    public const int CityDirectionFieldNumber = 9;
    private bool cityDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CityDirection {
      get { return cityDirection_; }
      set {
        cityDirection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestCityinfotype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestCityinfotype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fkcitycode != other.Fkcitycode) return false;
      if (Fkcityname != other.Fkcityname) return false;
      if (Cityascription != other.Cityascription) return false;
      if (Citylocationx != other.Citylocationx) return false;
      if (Citylocationy != other.Citylocationy) return false;
      if (CityWidth != other.CityWidth) return false;
      if (CityLength != other.CityLength) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EachLandSize, other.EachLandSize)) return false;
      if (CityDirection != other.CityDirection) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fkcitycode.Length != 0) hash ^= Fkcitycode.GetHashCode();
      if (Fkcityname.Length != 0) hash ^= Fkcityname.GetHashCode();
      if (Cityascription.Length != 0) hash ^= Cityascription.GetHashCode();
      if (Citylocationx != 0L) hash ^= Citylocationx.GetHashCode();
      if (Citylocationy != 0L) hash ^= Citylocationy.GetHashCode();
      if (CityWidth != 0L) hash ^= CityWidth.GetHashCode();
      if (CityLength != 0L) hash ^= CityLength.GetHashCode();
      if (EachLandSize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EachLandSize);
      if (CityDirection != false) hash ^= CityDirection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fkcitycode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fkcitycode);
      }
      if (Fkcityname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Fkcityname);
      }
      if (Cityascription.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Cityascription);
      }
      if (Citylocationx != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Citylocationx);
      }
      if (Citylocationy != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Citylocationy);
      }
      if (CityWidth != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CityWidth);
      }
      if (CityLength != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CityLength);
      }
      if (EachLandSize != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(EachLandSize);
      }
      if (CityDirection != false) {
        output.WriteRawTag(72);
        output.WriteBool(CityDirection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fkcitycode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkcitycode);
      }
      if (Fkcityname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkcityname);
      }
      if (Cityascription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cityascription);
      }
      if (Citylocationx != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Citylocationx);
      }
      if (Citylocationy != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Citylocationy);
      }
      if (CityWidth != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CityWidth);
      }
      if (CityLength != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CityLength);
      }
      if (EachLandSize != 0F) {
        size += 1 + 4;
      }
      if (CityDirection != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestCityinfotype other) {
      if (other == null) {
        return;
      }
      if (other.Fkcitycode.Length != 0) {
        Fkcitycode = other.Fkcitycode;
      }
      if (other.Fkcityname.Length != 0) {
        Fkcityname = other.Fkcityname;
      }
      if (other.Cityascription.Length != 0) {
        Cityascription = other.Cityascription;
      }
      if (other.Citylocationx != 0L) {
        Citylocationx = other.Citylocationx;
      }
      if (other.Citylocationy != 0L) {
        Citylocationy = other.Citylocationy;
      }
      if (other.CityWidth != 0L) {
        CityWidth = other.CityWidth;
      }
      if (other.CityLength != 0L) {
        CityLength = other.CityLength;
      }
      if (other.EachLandSize != 0F) {
        EachLandSize = other.EachLandSize;
      }
      if (other.CityDirection != false) {
        CityDirection = other.CityDirection;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fkcitycode = input.ReadString();
            break;
          }
          case 18: {
            Fkcityname = input.ReadString();
            break;
          }
          case 26: {
            Cityascription = input.ReadString();
            break;
          }
          case 32: {
            Citylocationx = input.ReadInt64();
            break;
          }
          case 40: {
            Citylocationy = input.ReadInt64();
            break;
          }
          case 48: {
            CityWidth = input.ReadInt64();
            break;
          }
          case 56: {
            CityLength = input.ReadInt64();
            break;
          }
          case 69: {
            EachLandSize = input.ReadFloat();
            break;
          }
          case 72: {
            CityDirection = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///FindCitylistRsplist 返回城市列表list
  /// </summary>
  public sealed partial class RequestCitylistRsp : pb::IMessage<RequestCitylistRsp> {
    private static readonly pb::MessageParser<RequestCitylistRsp> _parser = new pb::MessageParser<RequestCitylistRsp>(() => new RequestCitylistRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestCitylistRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCitylistRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCitylistRsp(RequestCitylistRsp other) : this() {
      rsplist_ = other.rsplist_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCitylistRsp Clone() {
      return new RequestCitylistRsp(this);
    }

    /// <summary>Field number for the "rsplist" field.</summary>
    public const int RsplistFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.RequestCityinfotype> _repeated_rsplist_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.RequestCityinfotype.Parser);
    private readonly pbc::RepeatedField<global::Proto.RequestCityinfotype> rsplist_ = new pbc::RepeatedField<global::Proto.RequestCityinfotype>();
    /// <summary>
    ///rsplist 城市list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.RequestCityinfotype> Rsplist {
      get { return rsplist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestCitylistRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestCitylistRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rsplist_.Equals(other.rsplist_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rsplist_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rsplist_.WriteTo(output, _repeated_rsplist_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rsplist_.CalculateSize(_repeated_rsplist_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestCitylistRsp other) {
      if (other == null) {
        return;
      }
      rsplist_.Add(other.rsplist_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rsplist_.AddEntriesFrom(input, _repeated_rsplist_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PBuildinginfo : pb::IMessage<PBuildinginfo> {
    private static readonly pb::MessageParser<PBuildinginfo> _parser = new pb::MessageParser<PBuildinginfo>(() => new PBuildinginfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBuildinginfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBuildinginfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBuildinginfo(PBuildinginfo other) : this() {
      uuid_ = other.uuid_;
      buildingCode_ = other.buildingCode_;
      towards_ = other.towards_;
      isTrueBuilding_ = other.isTrueBuilding_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBuildinginfo Clone() {
      return new PBuildinginfo(this);
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private long uuid_;
    /// <summary>
    /// 建筑Uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "BuildingCode" field.</summary>
    public const int BuildingCodeFieldNumber = 2;
    private long buildingCode_;
    /// <summary>
    ///BuildingCode 建筑数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BuildingCode {
      get { return buildingCode_; }
      set {
        buildingCode_ = value;
      }
    }

    /// <summary>Field number for the "Towards" field.</summary>
    public const int TowardsFieldNumber = 3;
    private long towards_;
    /// <summary>
    ///BuildingTowards 建筑朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Towards {
      get { return towards_; }
      set {
        towards_ = value;
      }
    }

    /// <summary>Field number for the "IsTrueBuilding" field.</summary>
    public const int IsTrueBuildingFieldNumber = 4;
    private bool isTrueBuilding_;
    /// <summary>
    ///IsTrueBuilding 是否是真正的建筑
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTrueBuilding {
      get { return isTrueBuilding_; }
      set {
        isTrueBuilding_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PBuildinginfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PBuildinginfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (BuildingCode != other.BuildingCode) return false;
      if (Towards != other.Towards) return false;
      if (IsTrueBuilding != other.IsTrueBuilding) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (BuildingCode != 0L) hash ^= BuildingCode.GetHashCode();
      if (Towards != 0L) hash ^= Towards.GetHashCode();
      if (IsTrueBuilding != false) hash ^= IsTrueBuilding.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uuid);
      }
      if (BuildingCode != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BuildingCode);
      }
      if (Towards != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Towards);
      }
      if (IsTrueBuilding != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsTrueBuilding);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (BuildingCode != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BuildingCode);
      }
      if (Towards != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Towards);
      }
      if (IsTrueBuilding != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PBuildinginfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.BuildingCode != 0L) {
        BuildingCode = other.BuildingCode;
      }
      if (other.Towards != 0L) {
        Towards = other.Towards;
      }
      if (other.IsTrueBuilding != false) {
        IsTrueBuilding = other.IsTrueBuilding;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uuid = input.ReadInt64();
            break;
          }
          case 16: {
            BuildingCode = input.ReadInt64();
            break;
          }
          case 24: {
            Towards = input.ReadInt64();
            break;
          }
          case 32: {
            IsTrueBuilding = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///LineUserinfo 该条线上用户信息
  /// </summary>
  public sealed partial class PLineUserinfo : pb::IMessage<PLineUserinfo> {
    private static readonly pb::MessageParser<PLineUserinfo> _parser = new pb::MessageParser<PLineUserinfo>(() => new PLineUserinfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PLineUserinfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PLineUserinfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PLineUserinfo(PLineUserinfo other) : this() {
      fkuuid_ = other.fkuuid_;
      xaxis_ = other.xaxis_;
      yaxis_ = other.yaxis_;
      direction_ = other.direction_;
      orientations_ = other.orientations_;
      remainNum_ = other.remainNum_;
      fktransportid_ = other.fktransportid_;
      giveUpReclama_ = other.giveUpReclama_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PLineUserinfo Clone() {
      return new PLineUserinfo(this);
    }

    /// <summary>Field number for the "Fkuuid" field.</summary>
    public const int FkuuidFieldNumber = 1;
    private string fkuuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkuuid {
      get { return fkuuid_; }
      set {
        fkuuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Xaxis" field.</summary>
    public const int XaxisFieldNumber = 2;
    private long xaxis_;
    /// <summary>
    ///Xaxis X坐标或下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Xaxis {
      get { return xaxis_; }
      set {
        xaxis_ = value;
      }
    }

    /// <summary>Field number for the "Yaxis" field.</summary>
    public const int YaxisFieldNumber = 3;
    private long yaxis_;
    /// <summary>
    ///Yaxis Y坐标或下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Yaxis {
      get { return yaxis_; }
      set {
        yaxis_ = value;
      }
    }

    /// <summary>Field number for the "Direction" field.</summary>
    public const int DirectionFieldNumber = 4;
    private bool direction_;
    /// <summary>
    ///Direction 行走方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "Orientations" field.</summary>
    public const int OrientationsFieldNumber = 5;
    private long orientations_;
    /// <summary>
    ///Orientations 朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Orientations {
      get { return orientations_; }
      set {
        orientations_ = value;
      }
    }

    /// <summary>Field number for the "RemainNum" field.</summary>
    public const int RemainNumFieldNumber = 6;
    private long remainNum_;
    /// <summary>
    ///RemainNum 剩余步数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RemainNum {
      get { return remainNum_; }
      set {
        remainNum_ = value;
      }
    }

    /// <summary>Field number for the "Fktransportid" field.</summary>
    public const int FktransportidFieldNumber = 8;
    private long fktransportid_;
    /// <summary>
    ///Fktransportid 使用的交通ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Fktransportid {
      get { return fktransportid_; }
      set {
        fktransportid_ = value;
      }
    }

    /// <summary>Field number for the "GiveUpReclama" field.</summary>
    public const int GiveUpReclamaFieldNumber = 7;
    private bool giveUpReclama_;
    /// <summary>
    ///GiveUpReclama 允许购买状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GiveUpReclama {
      get { return giveUpReclama_; }
      set {
        giveUpReclama_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PLineUserinfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PLineUserinfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fkuuid != other.Fkuuid) return false;
      if (Xaxis != other.Xaxis) return false;
      if (Yaxis != other.Yaxis) return false;
      if (Direction != other.Direction) return false;
      if (Orientations != other.Orientations) return false;
      if (RemainNum != other.RemainNum) return false;
      if (Fktransportid != other.Fktransportid) return false;
      if (GiveUpReclama != other.GiveUpReclama) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fkuuid.Length != 0) hash ^= Fkuuid.GetHashCode();
      if (Xaxis != 0L) hash ^= Xaxis.GetHashCode();
      if (Yaxis != 0L) hash ^= Yaxis.GetHashCode();
      if (Direction != false) hash ^= Direction.GetHashCode();
      if (Orientations != 0L) hash ^= Orientations.GetHashCode();
      if (RemainNum != 0L) hash ^= RemainNum.GetHashCode();
      if (Fktransportid != 0L) hash ^= Fktransportid.GetHashCode();
      if (GiveUpReclama != false) hash ^= GiveUpReclama.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fkuuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fkuuid);
      }
      if (Xaxis != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Xaxis);
      }
      if (Yaxis != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Yaxis);
      }
      if (Direction != false) {
        output.WriteRawTag(32);
        output.WriteBool(Direction);
      }
      if (Orientations != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Orientations);
      }
      if (RemainNum != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(RemainNum);
      }
      if (GiveUpReclama != false) {
        output.WriteRawTag(56);
        output.WriteBool(GiveUpReclama);
      }
      if (Fktransportid != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Fktransportid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fkuuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkuuid);
      }
      if (Xaxis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Xaxis);
      }
      if (Yaxis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Yaxis);
      }
      if (Direction != false) {
        size += 1 + 1;
      }
      if (Orientations != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Orientations);
      }
      if (RemainNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemainNum);
      }
      if (Fktransportid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fktransportid);
      }
      if (GiveUpReclama != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PLineUserinfo other) {
      if (other == null) {
        return;
      }
      if (other.Fkuuid.Length != 0) {
        Fkuuid = other.Fkuuid;
      }
      if (other.Xaxis != 0L) {
        Xaxis = other.Xaxis;
      }
      if (other.Yaxis != 0L) {
        Yaxis = other.Yaxis;
      }
      if (other.Direction != false) {
        Direction = other.Direction;
      }
      if (other.Orientations != 0L) {
        Orientations = other.Orientations;
      }
      if (other.RemainNum != 0L) {
        RemainNum = other.RemainNum;
      }
      if (other.Fktransportid != 0L) {
        Fktransportid = other.Fktransportid;
      }
      if (other.GiveUpReclama != false) {
        GiveUpReclama = other.GiveUpReclama;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fkuuid = input.ReadString();
            break;
          }
          case 16: {
            Xaxis = input.ReadInt64();
            break;
          }
          case 24: {
            Yaxis = input.ReadInt64();
            break;
          }
          case 32: {
            Direction = input.ReadBool();
            break;
          }
          case 40: {
            Orientations = input.ReadInt64();
            break;
          }
          case 48: {
            RemainNum = input.ReadInt64();
            break;
          }
          case 56: {
            GiveUpReclama = input.ReadBool();
            break;
          }
          case 64: {
            Fktransportid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///LinePropinfo  该条线上道具信息
  /// </summary>
  public sealed partial class PLinePropinfo : pb::IMessage<PLinePropinfo> {
    private static readonly pb::MessageParser<PLinePropinfo> _parser = new pb::MessageParser<PLinePropinfo>(() => new PLinePropinfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PLinePropinfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PLinePropinfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PLinePropinfo(PLinePropinfo other) : this() {
      proptype_ = other.proptype_;
      propstatus_ = other.propstatus_;
      propendtime_ = other.propendtime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PLinePropinfo Clone() {
      return new PLinePropinfo(this);
    }

    /// <summary>Field number for the "Proptype" field.</summary>
    public const int ProptypeFieldNumber = 1;
    private long proptype_;
    /// <summary>
    ///Proptype 道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Proptype {
      get { return proptype_; }
      set {
        proptype_ = value;
      }
    }

    /// <summary>Field number for the "Propstatus" field.</summary>
    public const int PropstatusFieldNumber = 2;
    private long propstatus_;
    /// <summary>
    ///Propstatus 道具状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Propstatus {
      get { return propstatus_; }
      set {
        propstatus_ = value;
      }
    }

    /// <summary>Field number for the "Propendtime" field.</summary>
    public const int PropendtimeFieldNumber = 3;
    private long propendtime_;
    /// <summary>
    ///Propendtime 倒计时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Propendtime {
      get { return propendtime_; }
      set {
        propendtime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PLinePropinfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PLinePropinfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Proptype != other.Proptype) return false;
      if (Propstatus != other.Propstatus) return false;
      if (Propendtime != other.Propendtime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Proptype != 0L) hash ^= Proptype.GetHashCode();
      if (Propstatus != 0L) hash ^= Propstatus.GetHashCode();
      if (Propendtime != 0L) hash ^= Propendtime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Proptype != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Proptype);
      }
      if (Propstatus != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Propstatus);
      }
      if (Propendtime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Propendtime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Proptype != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Proptype);
      }
      if (Propstatus != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Propstatus);
      }
      if (Propendtime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Propendtime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PLinePropinfo other) {
      if (other == null) {
        return;
      }
      if (other.Proptype != 0L) {
        Proptype = other.Proptype;
      }
      if (other.Propstatus != 0L) {
        Propstatus = other.Propstatus;
      }
      if (other.Propendtime != 0L) {
        Propendtime = other.Propendtime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Proptype = input.ReadInt64();
            break;
          }
          case 16: {
            Propstatus = input.ReadInt64();
            break;
          }
          case 24: {
            Propendtime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PBuildinginfolist : pb::IMessage<PBuildinginfolist> {
    private static readonly pb::MessageParser<PBuildinginfolist> _parser = new pb::MessageParser<PBuildinginfolist>(() => new PBuildinginfolist());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBuildinginfolist> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBuildinginfolist() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBuildinginfolist(PBuildinginfolist other) : this() {
      buildinginfo_ = other.buildinginfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBuildinginfolist Clone() {
      return new PBuildinginfolist(this);
    }

    /// <summary>Field number for the "Buildinginfo" field.</summary>
    public const int BuildinginfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.PBuildinginfo> _repeated_buildinginfo_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.PBuildinginfo.Parser);
    private readonly pbc::RepeatedField<global::Proto.PBuildinginfo> buildinginfo_ = new pbc::RepeatedField<global::Proto.PBuildinginfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.PBuildinginfo> Buildinginfo {
      get { return buildinginfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PBuildinginfolist);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PBuildinginfolist other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!buildinginfo_.Equals(other.buildinginfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= buildinginfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      buildinginfo_.WriteTo(output, _repeated_buildinginfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += buildinginfo_.CalculateSize(_repeated_buildinginfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PBuildinginfolist other) {
      if (other == null) {
        return;
      }
      buildinginfo_.Add(other.buildinginfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            buildinginfo_.AddEntriesFrom(input, _repeated_buildinginfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///RequestCityMapData 地图层Req
  /// </summary>
  public sealed partial class RequestCityMapDataReq : pb::IMessage<RequestCityMapDataReq> {
    private static readonly pb::MessageParser<RequestCityMapDataReq> _parser = new pb::MessageParser<RequestCityMapDataReq>(() => new RequestCityMapDataReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestCityMapDataReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCityMapDataReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCityMapDataReq(RequestCityMapDataReq other) : this() {
      fkcitycode_ = other.fkcitycode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCityMapDataReq Clone() {
      return new RequestCityMapDataReq(this);
    }

    /// <summary>Field number for the "Fkcitycode" field.</summary>
    public const int FkcitycodeFieldNumber = 1;
    private string fkcitycode_ = "";
    /// <summary>
    ///Fkcitycode 城市
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkcitycode {
      get { return fkcitycode_; }
      set {
        fkcitycode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestCityMapDataReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestCityMapDataReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fkcitycode != other.Fkcitycode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fkcitycode.Length != 0) hash ^= Fkcitycode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fkcitycode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fkcitycode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fkcitycode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkcitycode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestCityMapDataReq other) {
      if (other == null) {
        return;
      }
      if (other.Fkcitycode.Length != 0) {
        Fkcitycode = other.Fkcitycode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fkcitycode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MapDataHierarchyRsp 地图层次数据
  /// </summary>
  public sealed partial class RequestCityMapDataRsp : pb::IMessage<RequestCityMapDataRsp> {
    private static readonly pb::MessageParser<RequestCityMapDataRsp> _parser = new pb::MessageParser<RequestCityMapDataRsp>(() => new RequestCityMapDataRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestCityMapDataRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCityMapDataRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCityMapDataRsp(RequestCityMapDataRsp other) : this() {
      cityWidth_ = other.cityWidth_;
      cityLength_ = other.cityLength_;
      eachLandSize_ = other.eachLandSize_;
      cityDirection_ = other.cityDirection_;
      plotsbuyed_ = other.plotsbuyed_.Clone();
      buildingBaseinfo_ = other.buildingBaseinfo_.Clone();
      Lineuserinfo = other.lineuserinfo_ != null ? other.Lineuserinfo.Clone() : null;
      linepropinfo_ = other.linepropinfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCityMapDataRsp Clone() {
      return new RequestCityMapDataRsp(this);
    }

    /// <summary>Field number for the "CityWidth" field.</summary>
    public const int CityWidthFieldNumber = 6;
    private long cityWidth_;
    /// <summary>
    ///城市大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CityWidth {
      get { return cityWidth_; }
      set {
        cityWidth_ = value;
      }
    }

    /// <summary>Field number for the "CityLength" field.</summary>
    public const int CityLengthFieldNumber = 7;
    private long cityLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CityLength {
      get { return cityLength_; }
      set {
        cityLength_ = value;
      }
    }

    /// <summary>Field number for the "EachLandSize" field.</summary>
    public const int EachLandSizeFieldNumber = 8;
    private float eachLandSize_;
    /// <summary>
    ///每个地块大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EachLandSize {
      get { return eachLandSize_; }
      set {
        eachLandSize_ = value;
      }
    }

    /// <summary>Field number for the "CityDirection" field.</summary>
    public const int CityDirectionFieldNumber = 9;
    private bool cityDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CityDirection {
      get { return cityDirection_; }
      set {
        cityDirection_ = value;
      }
    }

    /// <summary>Field number for the "Plotsbuyed" field.</summary>
    public const int PlotsbuyedFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.PPlotsbuyed> _repeated_plotsbuyed_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.PPlotsbuyed.Parser);
    private readonly pbc::RepeatedField<global::Proto.PPlotsbuyed> plotsbuyed_ = new pbc::RepeatedField<global::Proto.PPlotsbuyed>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.PPlotsbuyed> Plotsbuyed {
      get { return plotsbuyed_; }
    }

    /// <summary>Field number for the "BuildingBaseinfo" field.</summary>
    public const int BuildingBaseinfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto.PBuildinginfolist> _repeated_buildingBaseinfo_codec
        = pb::FieldCodec.ForMessage(18, global::Proto.PBuildinginfolist.Parser);
    private readonly pbc::RepeatedField<global::Proto.PBuildinginfolist> buildingBaseinfo_ = new pbc::RepeatedField<global::Proto.PBuildinginfolist>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.PBuildinginfolist> BuildingBaseinfo {
      get { return buildingBaseinfo_; }
    }

    /// <summary>Field number for the "lineuserinfo" field.</summary>
    public const int LineuserinfoFieldNumber = 3;
    private global::Proto.PLineUserinfo lineuserinfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PLineUserinfo Lineuserinfo {
      get { return lineuserinfo_; }
      set {
        lineuserinfo_ = value;
      }
    }

    /// <summary>Field number for the "linepropinfo" field.</summary>
    public const int LinepropinfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Proto.PLinePropinfo> _repeated_linepropinfo_codec
        = pb::FieldCodec.ForMessage(34, global::Proto.PLinePropinfo.Parser);
    private readonly pbc::RepeatedField<global::Proto.PLinePropinfo> linepropinfo_ = new pbc::RepeatedField<global::Proto.PLinePropinfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.PLinePropinfo> Linepropinfo {
      get { return linepropinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestCityMapDataRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestCityMapDataRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CityWidth != other.CityWidth) return false;
      if (CityLength != other.CityLength) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EachLandSize, other.EachLandSize)) return false;
      if (CityDirection != other.CityDirection) return false;
      if(!plotsbuyed_.Equals(other.plotsbuyed_)) return false;
      if(!buildingBaseinfo_.Equals(other.buildingBaseinfo_)) return false;
      if (!object.Equals(Lineuserinfo, other.Lineuserinfo)) return false;
      if(!linepropinfo_.Equals(other.linepropinfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CityWidth != 0L) hash ^= CityWidth.GetHashCode();
      if (CityLength != 0L) hash ^= CityLength.GetHashCode();
      if (EachLandSize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EachLandSize);
      if (CityDirection != false) hash ^= CityDirection.GetHashCode();
      hash ^= plotsbuyed_.GetHashCode();
      hash ^= buildingBaseinfo_.GetHashCode();
      if (lineuserinfo_ != null) hash ^= Lineuserinfo.GetHashCode();
      hash ^= linepropinfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      plotsbuyed_.WriteTo(output, _repeated_plotsbuyed_codec);
      buildingBaseinfo_.WriteTo(output, _repeated_buildingBaseinfo_codec);
      if (lineuserinfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Lineuserinfo);
      }
      linepropinfo_.WriteTo(output, _repeated_linepropinfo_codec);
      if (CityWidth != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CityWidth);
      }
      if (CityLength != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CityLength);
      }
      if (EachLandSize != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(EachLandSize);
      }
      if (CityDirection != false) {
        output.WriteRawTag(72);
        output.WriteBool(CityDirection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CityWidth != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CityWidth);
      }
      if (CityLength != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CityLength);
      }
      if (EachLandSize != 0F) {
        size += 1 + 4;
      }
      if (CityDirection != false) {
        size += 1 + 1;
      }
      size += plotsbuyed_.CalculateSize(_repeated_plotsbuyed_codec);
      size += buildingBaseinfo_.CalculateSize(_repeated_buildingBaseinfo_codec);
      if (lineuserinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lineuserinfo);
      }
      size += linepropinfo_.CalculateSize(_repeated_linepropinfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestCityMapDataRsp other) {
      if (other == null) {
        return;
      }
      if (other.CityWidth != 0L) {
        CityWidth = other.CityWidth;
      }
      if (other.CityLength != 0L) {
        CityLength = other.CityLength;
      }
      if (other.EachLandSize != 0F) {
        EachLandSize = other.EachLandSize;
      }
      if (other.CityDirection != false) {
        CityDirection = other.CityDirection;
      }
      plotsbuyed_.Add(other.plotsbuyed_);
      buildingBaseinfo_.Add(other.buildingBaseinfo_);
      if (other.lineuserinfo_ != null) {
        if (lineuserinfo_ == null) {
          lineuserinfo_ = new global::Proto.PLineUserinfo();
        }
        Lineuserinfo.MergeFrom(other.Lineuserinfo);
      }
      linepropinfo_.Add(other.linepropinfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plotsbuyed_.AddEntriesFrom(input, _repeated_plotsbuyed_codec);
            break;
          }
          case 18: {
            buildingBaseinfo_.AddEntriesFrom(input, _repeated_buildingBaseinfo_codec);
            break;
          }
          case 26: {
            if (lineuserinfo_ == null) {
              lineuserinfo_ = new global::Proto.PLineUserinfo();
            }
            input.ReadMessage(lineuserinfo_);
            break;
          }
          case 34: {
            linepropinfo_.AddEntriesFrom(input, _repeated_linepropinfo_codec);
            break;
          }
          case 48: {
            CityWidth = input.ReadInt64();
            break;
          }
          case 56: {
            CityLength = input.ReadInt64();
            break;
          }
          case 69: {
            EachLandSize = input.ReadFloat();
            break;
          }
          case 72: {
            CityDirection = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Plotsbuyed 已购买地块信息
  /// </summary>
  public sealed partial class PPlotsbuyed : pb::IMessage<PPlotsbuyed> {
    private static readonly pb::MessageParser<PPlotsbuyed> _parser = new pb::MessageParser<PPlotsbuyed>(() => new PPlotsbuyed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PPlotsbuyed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PPlotsbuyed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PPlotsbuyed(PPlotsbuyed other) : this() {
      fkcitycode_ = other.fkcitycode_;
      fkThirdLanduuid_ = other.fkThirdLanduuid_;
      fkuuid_ = other.fkuuid_;
      xaxis_ = other.xaxis_;
      yaxis_ = other.yaxis_;
      buydate_ = other.buydate_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PPlotsbuyed Clone() {
      return new PPlotsbuyed(this);
    }

    /// <summary>Field number for the "Fkcitycode" field.</summary>
    public const int FkcitycodeFieldNumber = 2;
    private string fkcitycode_ = "";
    /// <summary>
    ///Fkcitycode 城市Code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkcitycode {
      get { return fkcitycode_; }
      set {
        fkcitycode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FkThirdLanduuid" field.</summary>
    public const int FkThirdLanduuidFieldNumber = 3;
    private string fkThirdLanduuid_ = "";
    /// <summary>
    ///FkThirdLanduuid 地块唯一标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FkThirdLanduuid {
      get { return fkThirdLanduuid_; }
      set {
        fkThirdLanduuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Fkuuid" field.</summary>
    public const int FkuuidFieldNumber = 4;
    private string fkuuid_ = "";
    /// <summary>
    ///Fkuuid 购买用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkuuid {
      get { return fkuuid_; }
      set {
        fkuuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Xaxis" field.</summary>
    public const int XaxisFieldNumber = 5;
    private long xaxis_;
    /// <summary>
    ///Xaxis X坐标或下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Xaxis {
      get { return xaxis_; }
      set {
        xaxis_ = value;
      }
    }

    /// <summary>Field number for the "Yaxis" field.</summary>
    public const int YaxisFieldNumber = 6;
    private long yaxis_;
    /// <summary>
    ///Yaxis Y坐标或下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Yaxis {
      get { return yaxis_; }
      set {
        yaxis_ = value;
      }
    }

    /// <summary>Field number for the "Buydate" field.</summary>
    public const int BuydateFieldNumber = 7;
    private string buydate_ = "";
    /// <summary>
    ///buydate 购买时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Buydate {
      get { return buydate_; }
      set {
        buydate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 8;
    private string name_ = "";
    /// <summary>
    ///Name 用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PPlotsbuyed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PPlotsbuyed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fkcitycode != other.Fkcitycode) return false;
      if (FkThirdLanduuid != other.FkThirdLanduuid) return false;
      if (Fkuuid != other.Fkuuid) return false;
      if (Xaxis != other.Xaxis) return false;
      if (Yaxis != other.Yaxis) return false;
      if (Buydate != other.Buydate) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fkcitycode.Length != 0) hash ^= Fkcitycode.GetHashCode();
      if (FkThirdLanduuid.Length != 0) hash ^= FkThirdLanduuid.GetHashCode();
      if (Fkuuid.Length != 0) hash ^= Fkuuid.GetHashCode();
      if (Xaxis != 0L) hash ^= Xaxis.GetHashCode();
      if (Yaxis != 0L) hash ^= Yaxis.GetHashCode();
      if (Buydate.Length != 0) hash ^= Buydate.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fkcitycode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Fkcitycode);
      }
      if (FkThirdLanduuid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FkThirdLanduuid);
      }
      if (Fkuuid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Fkuuid);
      }
      if (Xaxis != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Xaxis);
      }
      if (Yaxis != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Yaxis);
      }
      if (Buydate.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Buydate);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fkcitycode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkcitycode);
      }
      if (FkThirdLanduuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FkThirdLanduuid);
      }
      if (Fkuuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkuuid);
      }
      if (Xaxis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Xaxis);
      }
      if (Yaxis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Yaxis);
      }
      if (Buydate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Buydate);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PPlotsbuyed other) {
      if (other == null) {
        return;
      }
      if (other.Fkcitycode.Length != 0) {
        Fkcitycode = other.Fkcitycode;
      }
      if (other.FkThirdLanduuid.Length != 0) {
        FkThirdLanduuid = other.FkThirdLanduuid;
      }
      if (other.Fkuuid.Length != 0) {
        Fkuuid = other.Fkuuid;
      }
      if (other.Xaxis != 0L) {
        Xaxis = other.Xaxis;
      }
      if (other.Yaxis != 0L) {
        Yaxis = other.Yaxis;
      }
      if (other.Buydate.Length != 0) {
        Buydate = other.Buydate;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            Fkcitycode = input.ReadString();
            break;
          }
          case 26: {
            FkThirdLanduuid = input.ReadString();
            break;
          }
          case 34: {
            Fkuuid = input.ReadString();
            break;
          }
          case 40: {
            Xaxis = input.ReadInt64();
            break;
          }
          case 48: {
            Yaxis = input.ReadInt64();
            break;
          }
          case 58: {
            Buydate = input.ReadString();
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///GoWalkReq 行走请求
  /// </summary>
  public sealed partial class RequestGoWalkReq : pb::IMessage<RequestGoWalkReq> {
    private static readonly pb::MessageParser<RequestGoWalkReq> _parser = new pb::MessageParser<RequestGoWalkReq>(() => new RequestGoWalkReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestGoWalkReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestGoWalkReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestGoWalkReq(RequestGoWalkReq other) : this() {
      fkcitycode_ = other.fkcitycode_;
      fkuuid_ = other.fkuuid_;
      walkused_ = other.walkused_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestGoWalkReq Clone() {
      return new RequestGoWalkReq(this);
    }

    /// <summary>Field number for the "Fkcitycode" field.</summary>
    public const int FkcitycodeFieldNumber = 1;
    private string fkcitycode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkcitycode {
      get { return fkcitycode_; }
      set {
        fkcitycode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Fkuuid" field.</summary>
    public const int FkuuidFieldNumber = 2;
    private string fkuuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkuuid {
      get { return fkuuid_; }
      set {
        fkuuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Walkused" field.</summary>
    public const int WalkusedFieldNumber = 3;
    private long walkused_;
    /// <summary>
    ///行走步数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Walkused {
      get { return walkused_; }
      set {
        walkused_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestGoWalkReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestGoWalkReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fkcitycode != other.Fkcitycode) return false;
      if (Fkuuid != other.Fkuuid) return false;
      if (Walkused != other.Walkused) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fkcitycode.Length != 0) hash ^= Fkcitycode.GetHashCode();
      if (Fkuuid.Length != 0) hash ^= Fkuuid.GetHashCode();
      if (Walkused != 0L) hash ^= Walkused.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fkcitycode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fkcitycode);
      }
      if (Fkuuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Fkuuid);
      }
      if (Walkused != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Walkused);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fkcitycode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkcitycode);
      }
      if (Fkuuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkuuid);
      }
      if (Walkused != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Walkused);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestGoWalkReq other) {
      if (other == null) {
        return;
      }
      if (other.Fkcitycode.Length != 0) {
        Fkcitycode = other.Fkcitycode;
      }
      if (other.Fkuuid.Length != 0) {
        Fkuuid = other.Fkuuid;
      }
      if (other.Walkused != 0L) {
        Walkused = other.Walkused;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fkcitycode = input.ReadString();
            break;
          }
          case 18: {
            Fkuuid = input.ReadString();
            break;
          }
          case 24: {
            Walkused = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///GoWalkRsp 行走返回
  /// </summary>
  public sealed partial class RequestGoWalkRsp : pb::IMessage<RequestGoWalkRsp> {
    private static readonly pb::MessageParser<RequestGoWalkRsp> _parser = new pb::MessageParser<RequestGoWalkRsp>(() => new RequestGoWalkRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestGoWalkRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestGoWalkRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestGoWalkRsp(RequestGoWalkRsp other) : this() {
      fkuuid_ = other.fkuuid_;
      xaxis_ = other.xaxis_;
      yaxis_ = other.yaxis_;
      direction_ = other.direction_;
      orientations_ = other.orientations_;
      remainNum_ = other.remainNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestGoWalkRsp Clone() {
      return new RequestGoWalkRsp(this);
    }

    /// <summary>Field number for the "Fkuuid" field.</summary>
    public const int FkuuidFieldNumber = 1;
    private string fkuuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkuuid {
      get { return fkuuid_; }
      set {
        fkuuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Xaxis" field.</summary>
    public const int XaxisFieldNumber = 2;
    private long xaxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Xaxis {
      get { return xaxis_; }
      set {
        xaxis_ = value;
      }
    }

    /// <summary>Field number for the "Yaxis" field.</summary>
    public const int YaxisFieldNumber = 3;
    private long yaxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Yaxis {
      get { return yaxis_; }
      set {
        yaxis_ = value;
      }
    }

    /// <summary>Field number for the "Direction" field.</summary>
    public const int DirectionFieldNumber = 4;
    private bool direction_;
    /// <summary>
    ///Direction 行走方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "Orientations" field.</summary>
    public const int OrientationsFieldNumber = 5;
    private long orientations_;
    /// <summary>
    ///Orientations 朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Orientations {
      get { return orientations_; }
      set {
        orientations_ = value;
      }
    }

    /// <summary>Field number for the "RemainNum" field.</summary>
    public const int RemainNumFieldNumber = 6;
    private long remainNum_;
    /// <summary>
    ///RemainNum 剩余步数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RemainNum {
      get { return remainNum_; }
      set {
        remainNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestGoWalkRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestGoWalkRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fkuuid != other.Fkuuid) return false;
      if (Xaxis != other.Xaxis) return false;
      if (Yaxis != other.Yaxis) return false;
      if (Direction != other.Direction) return false;
      if (Orientations != other.Orientations) return false;
      if (RemainNum != other.RemainNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fkuuid.Length != 0) hash ^= Fkuuid.GetHashCode();
      if (Xaxis != 0L) hash ^= Xaxis.GetHashCode();
      if (Yaxis != 0L) hash ^= Yaxis.GetHashCode();
      if (Direction != false) hash ^= Direction.GetHashCode();
      if (Orientations != 0L) hash ^= Orientations.GetHashCode();
      if (RemainNum != 0L) hash ^= RemainNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fkuuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fkuuid);
      }
      if (Xaxis != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Xaxis);
      }
      if (Yaxis != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Yaxis);
      }
      if (Direction != false) {
        output.WriteRawTag(32);
        output.WriteBool(Direction);
      }
      if (Orientations != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Orientations);
      }
      if (RemainNum != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(RemainNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fkuuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkuuid);
      }
      if (Xaxis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Xaxis);
      }
      if (Yaxis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Yaxis);
      }
      if (Direction != false) {
        size += 1 + 1;
      }
      if (Orientations != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Orientations);
      }
      if (RemainNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemainNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestGoWalkRsp other) {
      if (other == null) {
        return;
      }
      if (other.Fkuuid.Length != 0) {
        Fkuuid = other.Fkuuid;
      }
      if (other.Xaxis != 0L) {
        Xaxis = other.Xaxis;
      }
      if (other.Yaxis != 0L) {
        Yaxis = other.Yaxis;
      }
      if (other.Direction != false) {
        Direction = other.Direction;
      }
      if (other.Orientations != 0L) {
        Orientations = other.Orientations;
      }
      if (other.RemainNum != 0L) {
        RemainNum = other.RemainNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fkuuid = input.ReadString();
            break;
          }
          case 16: {
            Xaxis = input.ReadInt64();
            break;
          }
          case 24: {
            Yaxis = input.ReadInt64();
            break;
          }
          case 32: {
            Direction = input.ReadBool();
            break;
          }
          case 40: {
            Orientations = input.ReadInt64();
            break;
          }
          case 48: {
            RemainNum = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Walkverify 验证行走
  /// </summary>
  public sealed partial class RequestWalkVerifyReq : pb::IMessage<RequestWalkVerifyReq> {
    private static readonly pb::MessageParser<RequestWalkVerifyReq> _parser = new pb::MessageParser<RequestWalkVerifyReq>(() => new RequestWalkVerifyReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestWalkVerifyReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWalkVerifyReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWalkVerifyReq(RequestWalkVerifyReq other) : this() {
      fkuuid_ = other.fkuuid_;
      xaxis_ = other.xaxis_;
      yaxis_ = other.yaxis_;
      direction_ = other.direction_;
      orientations_ = other.orientations_;
      walkused_ = other.walkused_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWalkVerifyReq Clone() {
      return new RequestWalkVerifyReq(this);
    }

    /// <summary>Field number for the "Fkuuid" field.</summary>
    public const int FkuuidFieldNumber = 1;
    private string fkuuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkuuid {
      get { return fkuuid_; }
      set {
        fkuuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Xaxis" field.</summary>
    public const int XaxisFieldNumber = 2;
    private long xaxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Xaxis {
      get { return xaxis_; }
      set {
        xaxis_ = value;
      }
    }

    /// <summary>Field number for the "Yaxis" field.</summary>
    public const int YaxisFieldNumber = 3;
    private long yaxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Yaxis {
      get { return yaxis_; }
      set {
        yaxis_ = value;
      }
    }

    /// <summary>Field number for the "Direction" field.</summary>
    public const int DirectionFieldNumber = 4;
    private bool direction_;
    /// <summary>
    ///Direction 行走方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "Orientations" field.</summary>
    public const int OrientationsFieldNumber = 5;
    private long orientations_;
    /// <summary>
    ///Orientations 朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Orientations {
      get { return orientations_; }
      set {
        orientations_ = value;
      }
    }

    /// <summary>Field number for the "Walkused" field.</summary>
    public const int WalkusedFieldNumber = 6;
    private long walkused_;
    /// <summary>
    ///当前这一步行走剩余步数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Walkused {
      get { return walkused_; }
      set {
        walkused_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestWalkVerifyReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestWalkVerifyReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fkuuid != other.Fkuuid) return false;
      if (Xaxis != other.Xaxis) return false;
      if (Yaxis != other.Yaxis) return false;
      if (Direction != other.Direction) return false;
      if (Orientations != other.Orientations) return false;
      if (Walkused != other.Walkused) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fkuuid.Length != 0) hash ^= Fkuuid.GetHashCode();
      if (Xaxis != 0L) hash ^= Xaxis.GetHashCode();
      if (Yaxis != 0L) hash ^= Yaxis.GetHashCode();
      if (Direction != false) hash ^= Direction.GetHashCode();
      if (Orientations != 0L) hash ^= Orientations.GetHashCode();
      if (Walkused != 0L) hash ^= Walkused.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fkuuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fkuuid);
      }
      if (Xaxis != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Xaxis);
      }
      if (Yaxis != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Yaxis);
      }
      if (Direction != false) {
        output.WriteRawTag(32);
        output.WriteBool(Direction);
      }
      if (Orientations != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Orientations);
      }
      if (Walkused != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Walkused);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fkuuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkuuid);
      }
      if (Xaxis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Xaxis);
      }
      if (Yaxis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Yaxis);
      }
      if (Direction != false) {
        size += 1 + 1;
      }
      if (Orientations != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Orientations);
      }
      if (Walkused != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Walkused);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestWalkVerifyReq other) {
      if (other == null) {
        return;
      }
      if (other.Fkuuid.Length != 0) {
        Fkuuid = other.Fkuuid;
      }
      if (other.Xaxis != 0L) {
        Xaxis = other.Xaxis;
      }
      if (other.Yaxis != 0L) {
        Yaxis = other.Yaxis;
      }
      if (other.Direction != false) {
        Direction = other.Direction;
      }
      if (other.Orientations != 0L) {
        Orientations = other.Orientations;
      }
      if (other.Walkused != 0L) {
        Walkused = other.Walkused;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fkuuid = input.ReadString();
            break;
          }
          case 16: {
            Xaxis = input.ReadInt64();
            break;
          }
          case 24: {
            Yaxis = input.ReadInt64();
            break;
          }
          case 32: {
            Direction = input.ReadBool();
            break;
          }
          case 40: {
            Orientations = input.ReadInt64();
            break;
          }
          case 48: {
            Walkused = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///行走成功消息队列返回
  /// </summary>
  public sealed partial class RequestWalkVerifySuccRsp : pb::IMessage<RequestWalkVerifySuccRsp> {
    private static readonly pb::MessageParser<RequestWalkVerifySuccRsp> _parser = new pb::MessageParser<RequestWalkVerifySuccRsp>(() => new RequestWalkVerifySuccRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestWalkVerifySuccRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWalkVerifySuccRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWalkVerifySuccRsp(RequestWalkVerifySuccRsp other) : this() {
      fkCityCode_ = other.fkCityCode_;
      fkuuid_ = other.fkuuid_;
      xaxis_ = other.xaxis_;
      yaxis_ = other.yaxis_;
      direction_ = other.direction_;
      orientations_ = other.orientations_;
      fktransportid_ = other.fktransportid_;
      turn_ = other.turn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWalkVerifySuccRsp Clone() {
      return new RequestWalkVerifySuccRsp(this);
    }

    /// <summary>Field number for the "FkCityCode" field.</summary>
    public const int FkCityCodeFieldNumber = 6;
    private string fkCityCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FkCityCode {
      get { return fkCityCode_; }
      set {
        fkCityCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Fkuuid" field.</summary>
    public const int FkuuidFieldNumber = 1;
    private string fkuuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkuuid {
      get { return fkuuid_; }
      set {
        fkuuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Xaxis" field.</summary>
    public const int XaxisFieldNumber = 2;
    private long xaxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Xaxis {
      get { return xaxis_; }
      set {
        xaxis_ = value;
      }
    }

    /// <summary>Field number for the "Yaxis" field.</summary>
    public const int YaxisFieldNumber = 3;
    private long yaxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Yaxis {
      get { return yaxis_; }
      set {
        yaxis_ = value;
      }
    }

    /// <summary>Field number for the "Direction" field.</summary>
    public const int DirectionFieldNumber = 4;
    private bool direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "Orientations" field.</summary>
    public const int OrientationsFieldNumber = 5;
    private long orientations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Orientations {
      get { return orientations_; }
      set {
        orientations_ = value;
      }
    }

    /// <summary>Field number for the "Fktransportid" field.</summary>
    public const int FktransportidFieldNumber = 7;
    private long fktransportid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Fktransportid {
      get { return fktransportid_; }
      set {
        fktransportid_ = value;
      }
    }

    /// <summary>Field number for the "Turn" field.</summary>
    public const int TurnFieldNumber = 8;
    private bool turn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Turn {
      get { return turn_; }
      set {
        turn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestWalkVerifySuccRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestWalkVerifySuccRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FkCityCode != other.FkCityCode) return false;
      if (Fkuuid != other.Fkuuid) return false;
      if (Xaxis != other.Xaxis) return false;
      if (Yaxis != other.Yaxis) return false;
      if (Direction != other.Direction) return false;
      if (Orientations != other.Orientations) return false;
      if (Fktransportid != other.Fktransportid) return false;
      if (Turn != other.Turn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FkCityCode.Length != 0) hash ^= FkCityCode.GetHashCode();
      if (Fkuuid.Length != 0) hash ^= Fkuuid.GetHashCode();
      if (Xaxis != 0L) hash ^= Xaxis.GetHashCode();
      if (Yaxis != 0L) hash ^= Yaxis.GetHashCode();
      if (Direction != false) hash ^= Direction.GetHashCode();
      if (Orientations != 0L) hash ^= Orientations.GetHashCode();
      if (Fktransportid != 0L) hash ^= Fktransportid.GetHashCode();
      if (Turn != false) hash ^= Turn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fkuuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fkuuid);
      }
      if (Xaxis != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Xaxis);
      }
      if (Yaxis != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Yaxis);
      }
      if (Direction != false) {
        output.WriteRawTag(32);
        output.WriteBool(Direction);
      }
      if (Orientations != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Orientations);
      }
      if (FkCityCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FkCityCode);
      }
      if (Fktransportid != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Fktransportid);
      }
      if (Turn != false) {
        output.WriteRawTag(64);
        output.WriteBool(Turn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FkCityCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FkCityCode);
      }
      if (Fkuuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkuuid);
      }
      if (Xaxis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Xaxis);
      }
      if (Yaxis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Yaxis);
      }
      if (Direction != false) {
        size += 1 + 1;
      }
      if (Orientations != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Orientations);
      }
      if (Fktransportid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fktransportid);
      }
      if (Turn != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestWalkVerifySuccRsp other) {
      if (other == null) {
        return;
      }
      if (other.FkCityCode.Length != 0) {
        FkCityCode = other.FkCityCode;
      }
      if (other.Fkuuid.Length != 0) {
        Fkuuid = other.Fkuuid;
      }
      if (other.Xaxis != 0L) {
        Xaxis = other.Xaxis;
      }
      if (other.Yaxis != 0L) {
        Yaxis = other.Yaxis;
      }
      if (other.Direction != false) {
        Direction = other.Direction;
      }
      if (other.Orientations != 0L) {
        Orientations = other.Orientations;
      }
      if (other.Fktransportid != 0L) {
        Fktransportid = other.Fktransportid;
      }
      if (other.Turn != false) {
        Turn = other.Turn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fkuuid = input.ReadString();
            break;
          }
          case 16: {
            Xaxis = input.ReadInt64();
            break;
          }
          case 24: {
            Yaxis = input.ReadInt64();
            break;
          }
          case 32: {
            Direction = input.ReadBool();
            break;
          }
          case 40: {
            Orientations = input.ReadInt64();
            break;
          }
          case 50: {
            FkCityCode = input.ReadString();
            break;
          }
          case 56: {
            Fktransportid = input.ReadInt64();
            break;
          }
          case 64: {
            Turn = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestWalkVerifyErrRsp : pb::IMessage<RequestWalkVerifyErrRsp> {
    private static readonly pb::MessageParser<RequestWalkVerifyErrRsp> _parser = new pb::MessageParser<RequestWalkVerifyErrRsp>(() => new RequestWalkVerifyErrRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestWalkVerifyErrRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWalkVerifyErrRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWalkVerifyErrRsp(RequestWalkVerifyErrRsp other) : this() {
      fkuuid_ = other.fkuuid_;
      backIndex_ = other.backIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWalkVerifyErrRsp Clone() {
      return new RequestWalkVerifyErrRsp(this);
    }

    /// <summary>Field number for the "Fkuuid" field.</summary>
    public const int FkuuidFieldNumber = 1;
    private string fkuuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkuuid {
      get { return fkuuid_; }
      set {
        fkuuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BackIndex" field.</summary>
    public const int BackIndexFieldNumber = 2;
    private long backIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BackIndex {
      get { return backIndex_; }
      set {
        backIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestWalkVerifyErrRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestWalkVerifyErrRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fkuuid != other.Fkuuid) return false;
      if (BackIndex != other.BackIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fkuuid.Length != 0) hash ^= Fkuuid.GetHashCode();
      if (BackIndex != 0L) hash ^= BackIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fkuuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fkuuid);
      }
      if (BackIndex != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BackIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fkuuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkuuid);
      }
      if (BackIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BackIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestWalkVerifyErrRsp other) {
      if (other == null) {
        return;
      }
      if (other.Fkuuid.Length != 0) {
        Fkuuid = other.Fkuuid;
      }
      if (other.BackIndex != 0L) {
        BackIndex = other.BackIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fkuuid = input.ReadString();
            break;
          }
          case 16: {
            BackIndex = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///重新获取玩家路线
  /// </summary>
  public sealed partial class RequestWalkWayReq : pb::IMessage<RequestWalkWayReq> {
    private static readonly pb::MessageParser<RequestWalkWayReq> _parser = new pb::MessageParser<RequestWalkWayReq>(() => new RequestWalkWayReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestWalkWayReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWalkWayReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWalkWayReq(RequestWalkWayReq other) : this() {
      fkuuid_ = other.fkuuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWalkWayReq Clone() {
      return new RequestWalkWayReq(this);
    }

    /// <summary>Field number for the "Fkuuid" field.</summary>
    public const int FkuuidFieldNumber = 1;
    private string fkuuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkuuid {
      get { return fkuuid_; }
      set {
        fkuuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestWalkWayReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestWalkWayReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fkuuid != other.Fkuuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fkuuid.Length != 0) hash ^= Fkuuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fkuuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fkuuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fkuuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkuuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestWalkWayReq other) {
      if (other == null) {
        return;
      }
      if (other.Fkuuid.Length != 0) {
        Fkuuid = other.Fkuuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fkuuid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///重新获取玩家路线
  /// </summary>
  public sealed partial class RequestWalkWayRsp : pb::IMessage<RequestWalkWayRsp> {
    private static readonly pb::MessageParser<RequestWalkWayRsp> _parser = new pb::MessageParser<RequestWalkWayRsp>(() => new RequestWalkWayRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestWalkWayRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWalkWayRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWalkWayRsp(RequestWalkWayRsp other) : this() {
      waydat_ = other.waydat_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWalkWayRsp Clone() {
      return new RequestWalkWayRsp(this);
    }

    /// <summary>Field number for the "Waydat" field.</summary>
    public const int WaydatFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.RequestWaydata> _repeated_waydat_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.RequestWaydata.Parser);
    private readonly pbc::RepeatedField<global::Proto.RequestWaydata> waydat_ = new pbc::RepeatedField<global::Proto.RequestWaydata>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.RequestWaydata> Waydat {
      get { return waydat_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestWalkWayRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestWalkWayRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!waydat_.Equals(other.waydat_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= waydat_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      waydat_.WriteTo(output, _repeated_waydat_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += waydat_.CalculateSize(_repeated_waydat_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestWalkWayRsp other) {
      if (other == null) {
        return;
      }
      waydat_.Add(other.waydat_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            waydat_.AddEntriesFrom(input, _repeated_waydat_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///购买地块Req
  /// </summary>
  public sealed partial class RequestReclamationReq : pb::IMessage<RequestReclamationReq> {
    private static readonly pb::MessageParser<RequestReclamationReq> _parser = new pb::MessageParser<RequestReclamationReq>(() => new RequestReclamationReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestReclamationReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestReclamationReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestReclamationReq(RequestReclamationReq other) : this() {
      fkuuid_ = other.fkuuid_;
      fkCityCode_ = other.fkCityCode_;
      landXaxis_ = other.landXaxis_;
      landYaxis_ = other.landYaxis_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestReclamationReq Clone() {
      return new RequestReclamationReq(this);
    }

    /// <summary>Field number for the "Fkuuid" field.</summary>
    public const int FkuuidFieldNumber = 1;
    private string fkuuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkuuid {
      get { return fkuuid_; }
      set {
        fkuuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FkCityCode" field.</summary>
    public const int FkCityCodeFieldNumber = 2;
    private string fkCityCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FkCityCode {
      get { return fkCityCode_; }
      set {
        fkCityCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LandXaxis" field.</summary>
    public const int LandXaxisFieldNumber = 3;
    private long landXaxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LandXaxis {
      get { return landXaxis_; }
      set {
        landXaxis_ = value;
      }
    }

    /// <summary>Field number for the "LandYaxis" field.</summary>
    public const int LandYaxisFieldNumber = 4;
    private long landYaxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LandYaxis {
      get { return landYaxis_; }
      set {
        landYaxis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestReclamationReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestReclamationReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fkuuid != other.Fkuuid) return false;
      if (FkCityCode != other.FkCityCode) return false;
      if (LandXaxis != other.LandXaxis) return false;
      if (LandYaxis != other.LandYaxis) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fkuuid.Length != 0) hash ^= Fkuuid.GetHashCode();
      if (FkCityCode.Length != 0) hash ^= FkCityCode.GetHashCode();
      if (LandXaxis != 0L) hash ^= LandXaxis.GetHashCode();
      if (LandYaxis != 0L) hash ^= LandYaxis.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fkuuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fkuuid);
      }
      if (FkCityCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FkCityCode);
      }
      if (LandXaxis != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LandXaxis);
      }
      if (LandYaxis != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LandYaxis);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fkuuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkuuid);
      }
      if (FkCityCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FkCityCode);
      }
      if (LandXaxis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LandXaxis);
      }
      if (LandYaxis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LandYaxis);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestReclamationReq other) {
      if (other == null) {
        return;
      }
      if (other.Fkuuid.Length != 0) {
        Fkuuid = other.Fkuuid;
      }
      if (other.FkCityCode.Length != 0) {
        FkCityCode = other.FkCityCode;
      }
      if (other.LandXaxis != 0L) {
        LandXaxis = other.LandXaxis;
      }
      if (other.LandYaxis != 0L) {
        LandYaxis = other.LandYaxis;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fkuuid = input.ReadString();
            break;
          }
          case 18: {
            FkCityCode = input.ReadString();
            break;
          }
          case 24: {
            LandXaxis = input.ReadInt64();
            break;
          }
          case 32: {
            LandYaxis = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// </summary>
  public sealed partial class RequestReclamationRsp : pb::IMessage<RequestReclamationRsp> {
    private static readonly pb::MessageParser<RequestReclamationRsp> _parser = new pb::MessageParser<RequestReclamationRsp>(() => new RequestReclamationRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestReclamationRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestReclamationRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestReclamationRsp(RequestReclamationRsp other) : this() {
      reqSucc_ = other.reqSucc_;
      fkuuid_ = other.fkuuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestReclamationRsp Clone() {
      return new RequestReclamationRsp(this);
    }

    /// <summary>Field number for the "ReqSucc" field.</summary>
    public const int ReqSuccFieldNumber = 1;
    private bool reqSucc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReqSucc {
      get { return reqSucc_; }
      set {
        reqSucc_ = value;
      }
    }

    /// <summary>Field number for the "Fkuuid" field.</summary>
    public const int FkuuidFieldNumber = 2;
    private string fkuuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkuuid {
      get { return fkuuid_; }
      set {
        fkuuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestReclamationRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestReclamationRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReqSucc != other.ReqSucc) return false;
      if (Fkuuid != other.Fkuuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReqSucc != false) hash ^= ReqSucc.GetHashCode();
      if (Fkuuid.Length != 0) hash ^= Fkuuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReqSucc != false) {
        output.WriteRawTag(8);
        output.WriteBool(ReqSucc);
      }
      if (Fkuuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Fkuuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReqSucc != false) {
        size += 1 + 1;
      }
      if (Fkuuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkuuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestReclamationRsp other) {
      if (other == null) {
        return;
      }
      if (other.ReqSucc != false) {
        ReqSucc = other.ReqSucc;
      }
      if (other.Fkuuid.Length != 0) {
        Fkuuid = other.Fkuuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReqSucc = input.ReadBool();
            break;
          }
          case 18: {
            Fkuuid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///地块购买成功广播
  /// </summary>
  public sealed partial class RequestReclamationSuccRsp : pb::IMessage<RequestReclamationSuccRsp> {
    private static readonly pb::MessageParser<RequestReclamationSuccRsp> _parser = new pb::MessageParser<RequestReclamationSuccRsp>(() => new RequestReclamationSuccRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestReclamationSuccRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestReclamationSuccRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestReclamationSuccRsp(RequestReclamationSuccRsp other) : this() {
      PPlotsbuyed = other.pPlotsbuyed_ != null ? other.PPlotsbuyed.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestReclamationSuccRsp Clone() {
      return new RequestReclamationSuccRsp(this);
    }

    /// <summary>Field number for the "PPlotsbuyed" field.</summary>
    public const int PPlotsbuyedFieldNumber = 1;
    private global::Proto.PPlotsbuyed pPlotsbuyed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PPlotsbuyed PPlotsbuyed {
      get { return pPlotsbuyed_; }
      set {
        pPlotsbuyed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestReclamationSuccRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestReclamationSuccRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PPlotsbuyed, other.PPlotsbuyed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pPlotsbuyed_ != null) hash ^= PPlotsbuyed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pPlotsbuyed_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PPlotsbuyed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pPlotsbuyed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PPlotsbuyed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestReclamationSuccRsp other) {
      if (other == null) {
        return;
      }
      if (other.pPlotsbuyed_ != null) {
        if (pPlotsbuyed_ == null) {
          pPlotsbuyed_ = new global::Proto.PPlotsbuyed();
        }
        PPlotsbuyed.MergeFrom(other.PPlotsbuyed);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pPlotsbuyed_ == null) {
              pPlotsbuyed_ = new global::Proto.PPlotsbuyed();
            }
            input.ReadMessage(pPlotsbuyed_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取其他玩家的位置和皮肤
  /// </summary>
  public sealed partial class RequestLineofUserPositionReq : pb::IMessage<RequestLineofUserPositionReq> {
    private static readonly pb::MessageParser<RequestLineofUserPositionReq> _parser = new pb::MessageParser<RequestLineofUserPositionReq>(() => new RequestLineofUserPositionReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestLineofUserPositionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestLineofUserPositionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestLineofUserPositionReq(RequestLineofUserPositionReq other) : this() {
      fkcitycode_ = other.fkcitycode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestLineofUserPositionReq Clone() {
      return new RequestLineofUserPositionReq(this);
    }

    /// <summary>Field number for the "Fkcitycode" field.</summary>
    public const int FkcitycodeFieldNumber = 1;
    private string fkcitycode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkcitycode {
      get { return fkcitycode_; }
      set {
        fkcitycode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestLineofUserPositionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestLineofUserPositionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fkcitycode != other.Fkcitycode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fkcitycode.Length != 0) hash ^= Fkcitycode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fkcitycode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fkcitycode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fkcitycode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkcitycode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestLineofUserPositionReq other) {
      if (other == null) {
        return;
      }
      if (other.Fkcitycode.Length != 0) {
        Fkcitycode = other.Fkcitycode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fkcitycode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///其他玩家的位置和皮肤回复
  /// </summary>
  public sealed partial class RequestLineofUserPositionRsp : pb::IMessage<RequestLineofUserPositionRsp> {
    private static readonly pb::MessageParser<RequestLineofUserPositionRsp> _parser = new pb::MessageParser<RequestLineofUserPositionRsp>(() => new RequestLineofUserPositionRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestLineofUserPositionRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestLineofUserPositionRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestLineofUserPositionRsp(RequestLineofUserPositionRsp other) : this() {
      offLineuuid_ = other.offLineuuid_.Clone();
      lineuserinfo_ = other.lineuserinfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestLineofUserPositionRsp Clone() {
      return new RequestLineofUserPositionRsp(this);
    }

    /// <summary>Field number for the "offLineuuid" field.</summary>
    public const int OffLineuuidFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.PositionRoleInfo> _repeated_offLineuuid_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.PositionRoleInfo.Parser);
    private readonly pbc::RepeatedField<global::Proto.PositionRoleInfo> offLineuuid_ = new pbc::RepeatedField<global::Proto.PositionRoleInfo>();
    /// <summary>
    ///离线玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.PositionRoleInfo> OffLineuuid {
      get { return offLineuuid_; }
    }

    /// <summary>Field number for the "lineuserinfo" field.</summary>
    public const int LineuserinfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Proto.PositionRoleInfo> _repeated_lineuserinfo_codec
        = pb::FieldCodec.ForMessage(26, global::Proto.PositionRoleInfo.Parser);
    private readonly pbc::RepeatedField<global::Proto.PositionRoleInfo> lineuserinfo_ = new pbc::RepeatedField<global::Proto.PositionRoleInfo>();
    /// <summary>
    ///线路上含有/新增玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.PositionRoleInfo> Lineuserinfo {
      get { return lineuserinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestLineofUserPositionRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestLineofUserPositionRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!offLineuuid_.Equals(other.offLineuuid_)) return false;
      if(!lineuserinfo_.Equals(other.lineuserinfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= offLineuuid_.GetHashCode();
      hash ^= lineuserinfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      offLineuuid_.WriteTo(output, _repeated_offLineuuid_codec);
      lineuserinfo_.WriteTo(output, _repeated_lineuserinfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += offLineuuid_.CalculateSize(_repeated_offLineuuid_codec);
      size += lineuserinfo_.CalculateSize(_repeated_lineuserinfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestLineofUserPositionRsp other) {
      if (other == null) {
        return;
      }
      offLineuuid_.Add(other.offLineuuid_);
      lineuserinfo_.Add(other.lineuserinfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            offLineuuid_.AddEntriesFrom(input, _repeated_offLineuuid_codec);
            break;
          }
          case 26: {
            lineuserinfo_.AddEntriesFrom(input, _repeated_lineuserinfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PositionRoleInfo : pb::IMessage<PositionRoleInfo> {
    private static readonly pb::MessageParser<PositionRoleInfo> _parser = new pb::MessageParser<PositionRoleInfo>(() => new PositionRoleInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PositionRoleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionRoleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionRoleInfo(PositionRoleInfo other) : this() {
      fkuuid_ = other.fkuuid_;
      name_ = other.name_;
      xaxis_ = other.xaxis_;
      yaxis_ = other.yaxis_;
      direction_ = other.direction_;
      orientations_ = other.orientations_;
      extra_ = other.extra_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionRoleInfo Clone() {
      return new PositionRoleInfo(this);
    }

    /// <summary>Field number for the "Fkuuid" field.</summary>
    public const int FkuuidFieldNumber = 1;
    private string fkuuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkuuid {
      get { return fkuuid_; }
      set {
        fkuuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 7;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Xaxis" field.</summary>
    public const int XaxisFieldNumber = 2;
    private long xaxis_;
    /// <summary>
    ///Xaxis X坐标或下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Xaxis {
      get { return xaxis_; }
      set {
        xaxis_ = value;
      }
    }

    /// <summary>Field number for the "Yaxis" field.</summary>
    public const int YaxisFieldNumber = 3;
    private long yaxis_;
    /// <summary>
    ///Yaxis Y坐标或下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Yaxis {
      get { return yaxis_; }
      set {
        yaxis_ = value;
      }
    }

    /// <summary>Field number for the "Direction" field.</summary>
    public const int DirectionFieldNumber = 4;
    private bool direction_;
    /// <summary>
    ///Direction 行走方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "Orientations" field.</summary>
    public const int OrientationsFieldNumber = 5;
    private long orientations_;
    /// <summary>
    ///Orientations 朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Orientations {
      get { return orientations_; }
      set {
        orientations_ = value;
      }
    }

    /// <summary>Field number for the "Extra" field.</summary>
    public const int ExtraFieldNumber = 6;
    private string extra_ = "";
    /// <summary>
    ///Extra 保存用户相关信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Extra {
      get { return extra_; }
      set {
        extra_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PositionRoleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PositionRoleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fkuuid != other.Fkuuid) return false;
      if (Name != other.Name) return false;
      if (Xaxis != other.Xaxis) return false;
      if (Yaxis != other.Yaxis) return false;
      if (Direction != other.Direction) return false;
      if (Orientations != other.Orientations) return false;
      if (Extra != other.Extra) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fkuuid.Length != 0) hash ^= Fkuuid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Xaxis != 0L) hash ^= Xaxis.GetHashCode();
      if (Yaxis != 0L) hash ^= Yaxis.GetHashCode();
      if (Direction != false) hash ^= Direction.GetHashCode();
      if (Orientations != 0L) hash ^= Orientations.GetHashCode();
      if (Extra.Length != 0) hash ^= Extra.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fkuuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fkuuid);
      }
      if (Xaxis != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Xaxis);
      }
      if (Yaxis != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Yaxis);
      }
      if (Direction != false) {
        output.WriteRawTag(32);
        output.WriteBool(Direction);
      }
      if (Orientations != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Orientations);
      }
      if (Extra.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Extra);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fkuuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkuuid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Xaxis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Xaxis);
      }
      if (Yaxis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Yaxis);
      }
      if (Direction != false) {
        size += 1 + 1;
      }
      if (Orientations != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Orientations);
      }
      if (Extra.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Extra);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PositionRoleInfo other) {
      if (other == null) {
        return;
      }
      if (other.Fkuuid.Length != 0) {
        Fkuuid = other.Fkuuid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Xaxis != 0L) {
        Xaxis = other.Xaxis;
      }
      if (other.Yaxis != 0L) {
        Yaxis = other.Yaxis;
      }
      if (other.Direction != false) {
        Direction = other.Direction;
      }
      if (other.Orientations != 0L) {
        Orientations = other.Orientations;
      }
      if (other.Extra.Length != 0) {
        Extra = other.Extra;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fkuuid = input.ReadString();
            break;
          }
          case 16: {
            Xaxis = input.ReadInt64();
            break;
          }
          case 24: {
            Yaxis = input.ReadInt64();
            break;
          }
          case 32: {
            Direction = input.ReadBool();
            break;
          }
          case 40: {
            Orientations = input.ReadInt64();
            break;
          }
          case 50: {
            Extra = input.ReadString();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///放弃此回合开垦机会
  /// </summary>
  public sealed partial class RequestGiveUpReclamationReq : pb::IMessage<RequestGiveUpReclamationReq> {
    private static readonly pb::MessageParser<RequestGiveUpReclamationReq> _parser = new pb::MessageParser<RequestGiveUpReclamationReq>(() => new RequestGiveUpReclamationReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestGiveUpReclamationReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestGiveUpReclamationReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestGiveUpReclamationReq(RequestGiveUpReclamationReq other) : this() {
      fkuuid_ = other.fkuuid_;
      fkcitycode_ = other.fkcitycode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestGiveUpReclamationReq Clone() {
      return new RequestGiveUpReclamationReq(this);
    }

    /// <summary>Field number for the "Fkuuid" field.</summary>
    public const int FkuuidFieldNumber = 1;
    private string fkuuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkuuid {
      get { return fkuuid_; }
      set {
        fkuuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Fkcitycode" field.</summary>
    public const int FkcitycodeFieldNumber = 2;
    private string fkcitycode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fkcitycode {
      get { return fkcitycode_; }
      set {
        fkcitycode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestGiveUpReclamationReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestGiveUpReclamationReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fkuuid != other.Fkuuid) return false;
      if (Fkcitycode != other.Fkcitycode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fkuuid.Length != 0) hash ^= Fkuuid.GetHashCode();
      if (Fkcitycode.Length != 0) hash ^= Fkcitycode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fkuuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fkuuid);
      }
      if (Fkcitycode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Fkcitycode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fkuuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkuuid);
      }
      if (Fkcitycode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fkcitycode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestGiveUpReclamationReq other) {
      if (other == null) {
        return;
      }
      if (other.Fkuuid.Length != 0) {
        Fkuuid = other.Fkuuid;
      }
      if (other.Fkcitycode.Length != 0) {
        Fkcitycode = other.Fkcitycode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fkuuid = input.ReadString();
            break;
          }
          case 18: {
            Fkcitycode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestGiveUpReclamationRsp : pb::IMessage<RequestGiveUpReclamationRsp> {
    private static readonly pb::MessageParser<RequestGiveUpReclamationRsp> _parser = new pb::MessageParser<RequestGiveUpReclamationRsp>(() => new RequestGiveUpReclamationRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestGiveUpReclamationRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PcityReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestGiveUpReclamationRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestGiveUpReclamationRsp(RequestGiveUpReclamationRsp other) : this() {
      upSucc_ = other.upSucc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestGiveUpReclamationRsp Clone() {
      return new RequestGiveUpReclamationRsp(this);
    }

    /// <summary>Field number for the "UpSucc" field.</summary>
    public const int UpSuccFieldNumber = 1;
    private bool upSucc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpSucc {
      get { return upSucc_; }
      set {
        upSucc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestGiveUpReclamationRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestGiveUpReclamationRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UpSucc != other.UpSucc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UpSucc != false) hash ^= UpSucc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UpSucc != false) {
        output.WriteRawTag(8);
        output.WriteBool(UpSucc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UpSucc != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestGiveUpReclamationRsp other) {
      if (other == null) {
        return;
      }
      if (other.UpSucc != false) {
        UpSucc = other.UpSucc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UpSucc = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
